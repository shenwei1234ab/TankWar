!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	./server/tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
Accept	./server/tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
Accept	./server/tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
Accept	./server/tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
Accept	./server/tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
Accept	./server/tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
Add	./server/tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
AsyncObject	./server/AsyncObject.h	/^class AsyncObject : public RefCounted {$/;"	c	inherits:RefCounted
AsyncObject::async	./server/AsyncObject.h	/^    void async(AsyncObjectPtr obj, std::function<void()> fn) {$/;"	f	class:AsyncObject	access:public	signature:(AsyncObjectPtr obj, std::function<void()> fn)
AsyncObjectPtr	./server/AsyncObject.h	/^typedef RefCountedPtr<AsyncObject> AsyncObjectPtr;$/;"	t
Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
Blank	./server/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
CDATA	./server/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
CGameHelper	./server/CGameHelper.h	/^class CGameHelper$/;"	c
CGameHelper::generatorImmediateFloat	./server/CGameHelper.h	/^	static float generatorImmediateFloat()$/;"	f	class:CGameHelper	access:public	signature:()
CGameHelper::generatorImmediateNumber	./server/CGameHelper.h	/^	static int  generatorImmediateNumber(int _maxNum)$/;"	f	class:CGameHelper	access:public	signature:(int _maxNum)
CGrass	./autocode/demo.hpp	/^struct CGrass {$/;"	s
CGrass	./server/CGrass.cpp	/^CGrass::CGrass(Game *_game)$/;"	f	class:CGrass	signature:(Game *_game)
CGrass	./server/CGrass.cpp	/^CGrass::CGrass(Game *_game, const vector2f &_pos, const vector2i & _radius)$/;"	f	class:CGrass	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius)
CGrass	./server/CGrass.h	/^class CGrass : public GameObject$/;"	c	inherits:GameObject
CGrass::CGrass	./server/CGrass.cpp	/^CGrass::CGrass(Game *_game)$/;"	f	class:CGrass	signature:(Game *_game)
CGrass::CGrass	./server/CGrass.cpp	/^CGrass::CGrass(Game *_game, const vector2f &_pos, const vector2i & _radius)$/;"	f	class:CGrass	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius)
CGrass::Init	./server/CGrass.cpp	/^void CGrass::Init(TiXmlElement* e)$/;"	f	class:CGrass	signature:(TiXmlElement* e)
CGrass::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CGrass	access:public	signature:(Variable_object &_vobj)
CGrass::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CGrass	access:public	signature:(Variable_object &_vobj) const
CGrass::fini	./server/CGrass.cpp	/^void  CGrass::fini()$/;"	f	class:CGrass	signature:()
CGrass::init	./server/CGrass.cpp	/^void CGrass::init()$/;"	f	class:CGrass	signature:()
CGrass::m_position	./server/CGrass.h	/^	vector2f m_position;$/;"	m	class:CGrass	access:protected
CGrass::m_radius	./server/CGrass.h	/^	vector2i m_radius;$/;"	m	class:CGrass	access:protected
CGrass::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CGrass	access:public
CGrass::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CGrass	access:public
CGrass::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CGrass	access:public
CGrass::snapshot	./server/CGrass.cpp	/^void CGrass::snapshot(pkt::Game &game)$/;"	f	class:CGrass	signature:(pkt::Game &game)
CMoney	./CMoney.cpp	/^CMoney::CMoney(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CMoney	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CMoney	./server/CMoney.cpp	/^CMoney::CMoney(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CMoney	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CMoney	./server/CMoney.h	/^class CMoney : public CProperty$/;"	c	inherits:CProperty
CMoney::CMoney	./CMoney.cpp	/^CMoney::CMoney(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CMoney	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CMoney::CMoney	./server/CMoney.cpp	/^CMoney::CMoney(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CMoney	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CMoney::create	./server/CMoney.cpp	/^CProperty*  CMoney::create(Game *pGame)$/;"	f	class:CMoney	signature:(Game *pGame)
CMoney::produceEffect	./CMoney.cpp	/^void CMoney::produceEffect(GameTank *ptank)const$/;"	f	class:CMoney	signature:(GameTank *ptank) const
CMoney::produceEffect	./server/CMoney.cpp	/^void CMoney::produceEffect(GameTank *ptank)const$/;"	f	class:CMoney	signature:(GameTank *ptank) const
CMoney::snapshot	./CMoney.cpp	/^void CMoney::snapshot(pkt::Game &game)$/;"	f	class:CMoney	signature:(pkt::Game &game)
CMoney::snapshot	./server/CMoney.cpp	/^void CMoney::snapshot(pkt::Game &game)$/;"	f	class:CMoney	signature:(pkt::Game &game)
CProperty	./autocode/demo.hpp	/^struct CProperty {$/;"	s
CProperty	./server/CProperty.cpp	/^CProperty::CProperty(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CProperty	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CProperty	./server/CProperty.h	/^	CProperty(){};$/;"	f	class:CProperty	access:public	signature:()
CProperty	./server/CProperty.h	/^class CProperty : public GameObject$/;"	c	inherits:GameObject
CProperty::CProperty	./server/CProperty.cpp	/^CProperty::CProperty(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CProperty	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CProperty::CProperty	./server/CProperty.h	/^	CProperty(){};$/;"	f	class:CProperty	access:public	signature:()
CProperty::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CProperty	access:public	signature:(Variable_object &_vobj)
CProperty::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CProperty	access:public	signature:(Variable_object &_vobj) const
CProperty::fini	./server/CProperty.cpp	/^void CProperty::fini()$/;"	f	class:CProperty	signature:()
CProperty::getPosition	./server/CProperty.h	/^	vector2f getPosition()const$/;"	f	class:CProperty	access:public	signature:() const
CProperty::getPropertyName	./server/CProperty.h	/^	str8  getPropertyName()const$/;"	f	class:CProperty	access:public	signature:() const
CProperty::getRadius	./server/CProperty.h	/^	vector2i getRadius()const$/;"	f	class:CProperty	access:public	signature:() const
CProperty::init	./server/CProperty.cpp	/^void CProperty::init()$/;"	f	class:CProperty	signature:()
CProperty::m_position	./server/CProperty.h	/^	vector2f m_position;$/;"	m	class:CProperty	access:protected
CProperty::m_propertyName	./server/CProperty.h	/^	str8 m_propertyName;$/;"	m	class:CProperty	access:protected
CProperty::m_radius	./server/CProperty.h	/^	vector2i m_radius;$/;"	m	class:CProperty	access:protected
CProperty::m_survivalTime	./server/CProperty.h	/^	f32 m_survivalTime;$/;"	m	class:CProperty	access:protected
CProperty::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CProperty	access:public
CProperty::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CProperty	access:public
CProperty::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CProperty	access:public
CProperty::propertyName	./autocode/demo.hpp	/^    str8 propertyName;$/;"	m	struct:CProperty	access:public
CProperty::setPosition	./server/CProperty.h	/^	void setPosition(const vector2f &_pos)$/;"	f	class:CProperty	access:public	signature:(const vector2f &_pos)
CProperty::snapshot	./server/CProperty.cpp	/^void CProperty::snapshot(pkt::Game &game)$/;"	f	class:CProperty	signature:(pkt::Game &game)
CProperty::update	./server/CProperty.cpp	/^void CProperty::update(f32 deltaTime)$/;"	f	class:CProperty	signature:(f32 deltaTime)
CPropertyFactory	./server/CPropertyFactory.h	/^	CPropertyFactory()$/;"	f	class:CPropertyFactory	access:public	signature:()
CPropertyFactory	./server/CPropertyFactory.h	/^class CPropertyFactory $/;"	c
CPropertyFactory::CPropertyFactory	./server/CPropertyFactory.h	/^	CPropertyFactory()$/;"	f	class:CPropertyFactory	access:public	signature:()
CPropertyFactory::getInstance	./server/CPropertyFactory.h	/^	static CPropertyFactory & getInstance()$/;"	f	class:CPropertyFactory	access:public	signature:()
CPropertyFactory::m_functions	./server/CPropertyFactory.h	/^	std::vector<std::function<CProperty*(Game * ) >> m_functions;$/;"	m	class:CPropertyFactory	access:protected
CPropertyFactory::produceProperty	./server/CPropertyFactory.cpp	/^CProperty * CPropertyFactory::produceProperty(Game *pGame)$/;"	f	class:CPropertyFactory	signature:(Game *pGame)
CPropertyFactory::registFun	./server/CPropertyFactory.cpp	/^void CPropertyFactory::registFun(std::function<CProperty*(Game *) > _fun)$/;"	f	class:CPropertyFactory	signature:(std::function<CProperty*(Game *) > _fun)
CProtectMask	./autocode/demo.hpp	/^struct CProtectMask {$/;"	s
CProtectMask	./server/CProtectMask.cpp	/^CProtectMask::CProtectMask(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CProtectMask	signature:(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CProtectMask	./server/CProtectMask.h	/^class CProtectMask : public GameObject$/;"	c	inherits:GameObject
CProtectMask::CProtectMask	./server/CProtectMask.cpp	/^CProtectMask::CProtectMask(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CProtectMask	signature:(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CProtectMask::Init	./server/CProtectMask.cpp	/^void CProtectMask::Init(TiXmlElement* e)$/;"	f	class:CProtectMask	signature:(TiXmlElement* e)
CProtectMask::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CProtectMask	access:public	signature:(Variable_object &_vobj)
CProtectMask::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CProtectMask	access:public	signature:(Variable_object &_vobj) const
CProtectMask::fini	./server/CProtectMask.cpp	/^void CProtectMask::fini()$/;"	f	class:CProtectMask	signature:()
CProtectMask::getownid	./server/CProtectMask.h	/^	u32 getownid()const$/;"	f	class:CProtectMask	access:public	signature:() const
CProtectMask::init	./server/CProtectMask.cpp	/^void CProtectMask::init()$/;"	f	class:CProtectMask	signature:()
CProtectMask::m_ownerId	./server/CProtectMask.h	/^	u32 m_ownerId;$/;"	m	class:CProtectMask	access:protected
CProtectMask::m_position	./server/CProtectMask.h	/^	vector2f m_position;$/;"	m	class:CProtectMask	access:protected
CProtectMask::m_radius	./server/CProtectMask.h	/^	vector2i m_radius;$/;"	m	class:CProtectMask	access:protected
CProtectMask::m_survivalTime	./server/CProtectMask.h	/^	f32 m_survivalTime;$/;"	m	class:CProtectMask	access:protected
CProtectMask::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CProtectMask	access:public
CProtectMask::ownerId	./autocode/demo.hpp	/^    unsigned int ownerId;$/;"	m	struct:CProtectMask	access:public
CProtectMask::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CProtectMask	access:public
CProtectMask::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CProtectMask	access:public
CProtectMask::snapshot	./server/CProtectMask.cpp	/^void CProtectMask::snapshot(pkt::Game &game)$/;"	f	class:CProtectMask	signature:(pkt::Game &game)
CProtectMask::update	./server/CProtectMask.cpp	/^void CProtectMask::update(f32 deltaTime)$/;"	f	class:CProtectMask	signature:(f32 deltaTime)
CRiver	./autocode/demo.hpp	/^struct CRiver {$/;"	s
CRiver	./server/CRiver.cpp	/^CRiver::CRiver(Game *_game)$/;"	f	class:CRiver	signature:(Game *_game)
CRiver	./server/CRiver.cpp	/^CRiver::CRiver(Game *_game, const vector2f &_pos, const vector2i & _radius, u32 _hp)$/;"	f	class:CRiver	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius, u32 _hp)
CRiver	./server/CRiver.h	/^class CRiver : public GameStaticEntity$/;"	c	inherits:GameStaticEntity
CRiver::CRiver	./server/CRiver.cpp	/^CRiver::CRiver(Game *_game)$/;"	f	class:CRiver	signature:(Game *_game)
CRiver::CRiver	./server/CRiver.cpp	/^CRiver::CRiver(Game *_game, const vector2f &_pos, const vector2i & _radius, u32 _hp)$/;"	f	class:CRiver	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius, u32 _hp)
CRiver::Init	./server/CRiver.cpp	/^void CRiver::Init(TiXmlElement* e)$/;"	f	class:CRiver	signature:(TiXmlElement* e)
CRiver::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CRiver	access:public	signature:(Variable_object &_vobj)
CRiver::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CRiver	access:public	signature:(Variable_object &_vobj) const
CRiver::fini	./server/CRiver.cpp	/^void  CRiver::fini()$/;"	f	class:CRiver	signature:()
CRiver::init	./server/CRiver.cpp	/^void CRiver::init()$/;"	f	class:CRiver	signature:()
CRiver::m_hp	./server/CRiver.h	/^	u32 m_hp;$/;"	m	class:CRiver	access:protected
CRiver::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CRiver	access:public
CRiver::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CRiver	access:public
CRiver::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CRiver	access:public
CRiver::snapshot	./server/CRiver.cpp	/^void CRiver::snapshot(pkt::Game &game)$/;"	f	class:CRiver	signature:(pkt::Game &game)
CSpeedUpProperty	./server/CSpeedUpProperty.cpp	/^CSpeedUpProperty::CSpeedUpProperty(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CSpeedUpProperty	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CSpeedUpProperty	./server/CSpeedUpProperty.h	/^class CSpeedUpProperty : public CProperty$/;"	c	inherits:CProperty
CSpeedUpProperty::CSpeedUpProperty	./server/CSpeedUpProperty.cpp	/^CSpeedUpProperty::CSpeedUpProperty(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime) :$/;"	f	class:CSpeedUpProperty	signature:(Game *_game, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
CSpeedUpProperty::m_speedUp	./server/CSpeedUpProperty.h	/^	f32 m_speedUp = 4.0f;$/;"	m	class:CSpeedUpProperty	access:protected
CSpeedUpProperty::produceEffect	./server/CSpeedUpProperty.cpp	/^void CSpeedUpProperty::produceEffect(GameTank *ptank)const$/;"	f	class:CSpeedUpProperty	signature:(GameTank *ptank) const
CSpeedUpProperty::snapshot	./server/CSpeedUpProperty.cpp	/^void CSpeedUpProperty::snapshot(pkt::Game &game)$/;"	f	class:CSpeedUpProperty	signature:(pkt::Game &game)
CStr	./server/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
CWall	./autocode/demo.hpp	/^struct CWall {$/;"	s
CWall	./server/CWall.cpp	/^CWall::CWall(Game *_game)$/;"	f	class:CWall	signature:(Game *_game)
CWall	./server/CWall.cpp	/^CWall::CWall(Game *_game, const vector2f &_pos, const vector2i & _radius,u32 _hp)$/;"	f	class:CWall	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius,u32 _hp)
CWall	./server/CWall.h	/^class CWall : public GameStaticEntity$/;"	c	inherits:GameStaticEntity
CWall::CWall	./server/CWall.cpp	/^CWall::CWall(Game *_game)$/;"	f	class:CWall	signature:(Game *_game)
CWall::CWall	./server/CWall.cpp	/^CWall::CWall(Game *_game, const vector2f &_pos, const vector2i & _radius,u32 _hp)$/;"	f	class:CWall	signature:(Game *_game, const vector2f &_pos, const vector2i & _radius,u32 _hp)
CWall::Init	./server/CWall.cpp	/^void CWall::Init(TiXmlElement* e)$/;"	f	class:CWall	signature:(TiXmlElement* e)
CWall::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CWall	access:public	signature:(Variable_object &_vobj)
CWall::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CWall	access:public	signature:(Variable_object &_vobj) const
CWall::fini	./server/CWall.cpp	/^void  CWall::fini()$/;"	f	class:CWall	signature:()
CWall::getHP	./server/CWall.h	/^	u32 getHP()const$/;"	f	class:CWall	access:public	signature:() const
CWall::init	./server/CWall.cpp	/^void CWall::init()$/;"	f	class:CWall	signature:()
CWall::m_hp	./server/CWall.h	/^	u32 m_hp;$/;"	m	class:CWall	access:protected
CWall::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CWall	access:public
CWall::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CWall	access:public
CWall::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CWall	access:public
CWall::setHP	./server/CWall.h	/^	void setHP(u32 _hp)$/;"	f	class:CWall	access:public	signature:(u32 _hp)
CWall::snapshot	./server/CWall.cpp	/^void CWall::snapshot(pkt::Game &game)$/;"	f	class:CWall	signature:(pkt::Game &game)
Cell	./server/Game.h	/^    struct Cell $/;"	s	class:Game	access:public
Child	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
Child	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
Child	./server/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
ChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
ChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
ChildElement	./server/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
Clear	./server/tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
Clear	./server/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
ClearError	./server/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
ClearThis	./server/tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
Column	./server/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
ConvertUTF32ToUTF8	./server/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
CopyTo	./server/tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
CopyTo	./server/tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
CreateElement	./server/GameObjectManager.cpp	/^GameObject *  GameObjectManager::CreateElement(const  str8  &name, Game * pGame)$/;"	f	class:GameObjectManager	signature:(const str8 &name, Game * pGame)
Cursor	./server/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:() const
DBManager	./server/DBManager.h	/^class DBManager : public Singleton<DBManager> $/;"	c	inherits:Singleton
DBManager::PlayerInfo	./server/DBManager.h	/^    struct PlayerInfo {$/;"	s	class:DBManager	access:public
DBManager::PlayerInfo::PlayerInfo	./server/DBManager.h	/^        PlayerInfo(PlayerInfo &&rhs): playerName(std::move(rhs.playerName)) {}$/;"	f	struct:DBManager::PlayerInfo	access:public	signature:(PlayerInfo &&rhs)
DBManager::PlayerInfo::playerName	./server/DBManager.h	/^        str8 playerName;$/;"	m	struct:DBManager::PlayerInfo	access:public
DBManager::m_pool	./server/DBManager.h	/^    WorkPool m_pool;$/;"	m	class:DBManager	access:private
DB_STMT	./server/DBManager.cpp	/^struct DB_STMT {$/;"	s	file:
DB_STMT::kInsertAccount	./server/DBManager.cpp	/^        kInsertAccount,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
DB_STMT::kInsertPlayer	./server/DBManager.cpp	/^        kInsertPlayer,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
DB_STMT::kQueryPlayerInfo	./server/DBManager.cpp	/^        kQueryPlayerInfo,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
DB_STMT::kUpdatePlayerName	./server/DBManager.cpp	/^        kUpdatePlayerName,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
DEBUG	./server/tinyxml.h	43;"	d
DECL_SERVER_APP	./common/ServerApp.h	61;"	d
DemoServer	./server/DemoServer.h	/^class DemoServer : public ServerApp {$/;"	c	inherits:ServerApp
DemoServer::_console_input	./server/DemoServer.cpp	/^void DemoServer::_console_input(str8 cmd) {$/;"	f	class:DemoServer	signature:(str8 cmd)
DemoServer::_init_link_pool	./server/DemoServer.cpp	/^bool DemoServer::_init_link_pool() {$/;"	f	class:DemoServer	signature:()
DemoServer::_load_config	./server/DemoServer.cpp	/^bool DemoServer::_load_config() {$/;"	f	class:DemoServer	signature:()
DemoServer::finalize	./server/DemoServer.cpp	/^void DemoServer::finalize() {$/;"	f	class:DemoServer	signature:()
DemoServer::initialize	./server/DemoServer.cpp	/^bool DemoServer::initialize(int argc, const char *argv[]) {$/;"	f	class:DemoServer	signature:(int argc, const char *argv[])
DemoServer::m_console_mode	./server/DemoServer.h	/^    bool m_console_mode = false;$/;"	m	class:DemoServer	access:private
DemoServer::m_console_thread	./server/DemoServer.h	/^    std::unique_ptr<std::thread> m_console_thread;$/;"	m	class:DemoServer	access:private
DemoServer::m_db_passwd	./server/DemoServer.h	/^    str8 m_db_passwd;$/;"	m	class:DemoServer	access:private
DemoServer::m_db_server	./server/DemoServer.h	/^    str8 m_db_server;$/;"	m	class:DemoServer	access:private
DemoServer::m_db_threads	./server/DemoServer.h	/^    size_t m_db_threads = 0;$/;"	m	class:DemoServer	access:private
DemoServer::m_db_user	./server/DemoServer.h	/^    str8 m_db_user;$/;"	m	class:DemoServer	access:private
DemoServer::m_link_pool	./server/DemoServer.h	/^    LinkPool *m_link_pool = nullptr;$/;"	m	class:DemoServer	access:private
DemoServer::m_link_pool_threads	./server/DemoServer.h	/^    size_t m_link_pool_threads = 0;$/;"	m	class:DemoServer	access:private
DemoServer::m_public_listen	./server/DemoServer.h	/^    PublicListen m_public_listen;$/;"	m	class:DemoServer	access:private
DemoServer::m_public_port	./server/DemoServer.h	/^    u16 m_public_port = 0;$/;"	m	class:DemoServer	access:private
DemoServer::update	./server/DemoServer.cpp	/^void DemoServer::update(f32 deltaTime) {$/;"	f	class:DemoServer	signature:(f32 deltaTime)
Direction	./server/GameCommon.h	/^    enum Direction {$/;"	g	namespace:game
DoIndent	./server/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter	access:private	signature:()
DoLineBreak	./server/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
DoubleValue	./server/tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
Element	./server/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
EncodeString	./server/tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
Encoding	./server/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Entity	./server/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase	access:private
Error	./server/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorCol	./server/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorDesc	./server/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorId	./server/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
ErrorRow	./server/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Father	./common/ServerApp.cpp	/^class Father$/;"	c	file:
Father	./server/MyTest.h	/^class Father$/;"	c
Father::SetId	./server/MyTest.h	/^  void SetId(int id)$/;"	f	class:Father	access:public	signature:(int id)
Father::SetName	./server/MyTest.h	/^  void SetName(int name)$/;"	f	class:Father	access:public	signature:(int name)
Father::m_id	./server/MyTest.h	/^  int m_id;$/;"	m	class:Father	access:private
Father::m_name	./server/MyTest.h	/^  int m_name;$/;"	m	class:Father	access:private
Find	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
Find	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
FindOrCreate	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
FindOrCreate	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
First	./server/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
First	./server/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
FirstAttribute	./server/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
FirstAttribute	./server/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
FirstChild	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChild	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChild	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChild	./server/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChild	./server/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
FirstChild	./server/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
FirstChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
FirstChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
FirstChildElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
FirstChildElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
FirstChildElement	./server/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
FirstChildElement	./server/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
Game	./autocode/demo.hpp	/^struct Game {$/;"	s
Game	./server/Game.cpp	/^Game::Game(Room *room, f32 _playTime)$/;"	f	class:Game	signature:(Room *room, f32 _playTime)
Game	./server/Game.h	/^class Game : public AllocatedObject {$/;"	c	inherits:AllocatedObject
Game::Cell	./server/Game.h	/^    struct Cell $/;"	s	class:Game	access:public
Game::Cell::bullet	./server/Game.h	/^        GameBullet *bullet = nullptr;$/;"	m	struct:Game::Cell	access:public
Game::Cell::entity	./server/Game.h	/^        GameEntity *entity = nullptr;$/;"	m	struct:Game::Cell	access:public
Game::Cell::pMask	./server/Game.h	/^		CProtectMask *pMask = nullptr;$/;"	m	struct:Game::Cell	access:public
Game::Cell::pProperty	./server/Game.h	/^		CProperty *pProperty = nullptr;$/;"	m	struct:Game::Cell	access:public
Game::Game	./server/Game.cpp	/^Game::Game(Room *room, f32 _playTime)$/;"	f	class:Game	signature:(Room *room, f32 _playTime)
Game::ObjectBlock	./server/Game.h	/^    struct ObjectBlock  {$/;"	s	class:Game	access:protected
Game::ObjectBlock::ObjectBlock	./server/Game.h	/^        ObjectBlock(GameObjectPtr &&_obj) : obj(std::move(_obj)) {}$/;"	f	struct:Game::ObjectBlock	access:public	signature:(GameObjectPtr &&_obj)
Game::ObjectBlock::ObjectBlock	./server/Game.h	/^        ObjectBlock(ObjectBlock &&v) : obj(std::move(v.obj)), it(std::move(v.it)) {}$/;"	f	struct:Game::ObjectBlock	access:public	signature:(ObjectBlock &&v)
Game::ObjectBlock::it	./server/Game.h	/^        std::map<u32, ObjectIndexBlock>::iterator it;$/;"	m	struct:Game::ObjectBlock	access:public
Game::ObjectBlock::obj	./server/Game.h	/^        GameObjectPtr obj;$/;"	m	struct:Game::ObjectBlock	access:public
Game::ObjectIndexBlock	./server/Game.h	/^    struct ObjectIndexBlock {$/;"	s	class:Game	access:protected
Game::ObjectIndexBlock::it	./server/Game.h	/^        std::list<ObjectBlock>::iterator it;$/;"	m	struct:Game::ObjectIndexBlock	access:public
Game::ObjectIndexBlock::list	./server/Game.h	/^        std::list<ObjectBlock> *list = nullptr;$/;"	m	struct:Game::ObjectIndexBlock	access:public
Game::_addObject	./server/Game.cpp	/^bool Game::_addObject(GameObjectPtr object) $/;"	f	class:Game	signature:(GameObjectPtr object)
Game::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:Game	access:public	signature:(Variable_object &_vobj)
Game::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:Game	access:public	signature:(Variable_object &_vobj) const
Game::_update	./server/Game.cpp	/^void Game::_update(f32 deltaTime) {$/;"	f	class:Game	signature:(f32 deltaTime)
Game::any_check	./server/Game.cpp	/^bool Game::any_check(const vector2i &_pos, const vector2i &_radius) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius) const
Game::broadcastPackets	./server/Game.h	/^    std::vector<PacketPtr> & broadcastPackets() { return m_broadcastPackets; }$/;"	f	class:Game	access:public	signature:()
Game::broadcastPeriod	./server/Game.h	/^	f32 broadcastPeriod() const { return 0.25f; }$/;"	f	class:Game	access:public	signature:() const
Game::bullets	./autocode/demo.hpp	/^    std::vector<GameBullet> bullets;$/;"	m	struct:Game	access:public
Game::cell	./server/Game.cpp	/^Game::Cell * Game::cell(const vector2i &_pos) {$/;"	f	class:Game	signature:(const vector2i &_pos)
Game::cell_check	./server/Game.cpp	/^bool Game::cell_check(const vector2i &_pos, const vector2i &_radius, GameEntity *except) const $/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameEntity *except) const
Game::cell_getBullet	./server/Game.cpp	/^GameBullet * Game::cell_getBullet(const vector2i &_pos, const vector2i &_radius, GameBullet *except) const {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameBullet *except) const
Game::cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, CProperty  *pProperty)$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, CProperty *pProperty)
Game::cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, CProtectMask *mask) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, CProtectMask *mask)
Game::cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, GameBullet *bullet) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameBullet *bullet)
Game::cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, GameEntity *entity) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameEntity *entity)
Game::createBullet	./server/Game.cpp	/^u32 Game::createBullet(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir,u32 _power)$/;"	f	class:Game	signature:(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir,u32 _power)
Game::createPlayer	./server/Game.cpp	/^GamePlayerPtr Game::createPlayer(const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)$/;"	f	class:Game	signature:(const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)
Game::createProtectMask	./server/Game.cpp	/^void Game::createProtectMask(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32  _survivalTime)$/;"	f	class:Game	signature:(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
Game::createWall	./server/Game.cpp	/^void Game::createWall(const vector2f &_pos, const vector2i & _radius, u32 _hp)$/;"	f	class:Game	signature:(const vector2f &_pos, const vector2i & _radius, u32 _hp)
Game::findObject	./server/Game.cpp	/^GameObjectPtr Game::findObject(u32 objectId) $/;"	f	class:Game	signature:(u32 objectId)
Game::generateObjectId	./server/Game.cpp	/^u32 Game::generateObjectId() {$/;"	f	class:Game	signature:()
Game::grasses	./autocode/demo.hpp	/^    std::vector<CGrass> grasses;$/;"	m	struct:Game	access:public
Game::m_broadcastPackets	./server/Game.h	/^    std::vector<PacketPtr> m_broadcastPackets;$/;"	m	class:Game	access:protected
Game::m_cells	./server/Game.h	/^    std::vector<Cell> m_cells;$/;"	m	class:Game	access:protected
Game::m_incomings	./server/Game.h	/^    std::list<ObjectBlock> m_objects, m_incomings;$/;"	m	class:Game	access:protected
Game::m_lastId	./server/Game.h	/^	u32 m_lastId = 0;$/;"	m	class:Game	access:protected
Game::m_objectIndex	./server/Game.h	/^    std::map<u32, ObjectIndexBlock> m_objectIndex;$/;"	m	class:Game	access:protected
Game::m_objects	./server/Game.h	/^    std::list<ObjectBlock> m_objects, m_incomings;$/;"	m	class:Game	access:protected
Game::m_playTime	./server/Game.h	/^	f32 m_playTime;$/;"	m	class:Game	access:protected
Game::m_propertyTime	./server/Game.h	/^	f32 m_propertyTime = 20.0f;$/;"	m	class:Game	access:protected
Game::m_propertyTimer	./server/Game.h	/^	f32 m_propertyTimer = 20.0f;$/;"	m	class:Game	access:protected
Game::m_removeds	./server/Game.h	/^    std::vector<std::list<ObjectBlock>::iterator> m_removeds;$/;"	m	class:Game	access:protected
Game::m_room	./server/Game.h	/^	Room *m_room;$/;"	m	class:Game	access:protected
Game::m_time_stamp	./server/Game.h	/^    f32 m_time_stamp = 0;$/;"	m	class:Game	access:protected
Game::m_updateTimer	./server/Game.h	/^    f32 m_updateTimer = 0;$/;"	m	class:Game	access:protected
Game::m_updating	./server/Game.h	/^    bool m_updating = false;$/;"	m	class:Game	access:protected
Game::mask_check	./server/Game.cpp	/^bool Game::mask_check(const vector2i &_pos, const vector2i &_radius, u32 ownId) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, u32 ownId) const
Game::players	./autocode/demo.hpp	/^    std::vector<GamePlayer> players;$/;"	m	struct:Game	access:public
Game::properties	./autocode/demo.hpp	/^    std::vector<CProperty> properties;$/;"	m	struct:Game	access:public
Game::property_check	./server/Game.cpp	/^CProperty*  Game::property_check(const vector2i &_pos, const vector2i &_radius) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius) const
Game::protectmasks	./autocode/demo.hpp	/^    std::vector<CProtectMask> protectmasks;$/;"	m	struct:Game	access:public
Game::removeObject	./server/Game.cpp	/^void Game::removeObject(u32 objectId) {$/;"	f	class:Game	signature:(u32 objectId)
Game::rivers	./autocode/demo.hpp	/^    std::vector<CRiver> rivers;$/;"	m	struct:Game	access:public
Game::size	./server/Game.h	/^    const vector2i & size() const { return m_size; }$/;"	f	class:Game	access:public	signature:() const
Game::snapshot	./server/Game.cpp	/^void Game::snapshot(pkt::Game &game) {$/;"	f	class:Game	signature:(pkt::Game &game)
Game::timeStamp	./autocode/demo.hpp	/^    f32 timeStamp;$/;"	m	struct:Game	access:public
Game::time_stamp	./server/Game.h	/^    f32 time_stamp() const { return m_time_stamp; }$/;"	f	class:Game	access:public	signature:() const
Game::update	./server/Game.cpp	/^void Game::update(f32 deltaTime) $/;"	f	class:Game	signature:(f32 deltaTime)
Game::walls	./autocode/demo.hpp	/^    std::vector<CWall> walls;$/;"	m	struct:Game	access:public
GameBullet	./autocode/demo.hpp	/^struct GameBullet {$/;"	s
GameBullet	./server/GameBullet.cpp	/^GameBullet::GameBullet(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir, u32 _power)$/;"	f	class:GameBullet	signature:(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir, u32 _power)
GameBullet	./server/GameBullet.h	/^class GameBullet : public GameObject $/;"	c	inherits:GameObject
GameBullet::GameBullet	./server/GameBullet.cpp	/^GameBullet::GameBullet(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir, u32 _power)$/;"	f	class:GameBullet	signature:(Game *_game, u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir, u32 _power)
GameBullet::Init	./server/GameBullet.cpp	/^void GameBullet::Init(TiXmlElement* e)$/;"	f	class:GameBullet	signature:(TiXmlElement* e)
GameBullet::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GameBullet	access:public	signature:(Variable_object &_vobj)
GameBullet::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GameBullet	access:public	signature:(Variable_object &_vobj) const
GameBullet::direction	./autocode/demo.hpp	/^    unsigned int direction;$/;"	m	struct:GameBullet	access:public
GameBullet::fini	./server/GameBullet.cpp	/^void GameBullet::fini() {$/;"	f	class:GameBullet	signature:()
GameBullet::init	./server/GameBullet.cpp	/^void GameBullet::init() {$/;"	f	class:GameBullet	signature:()
GameBullet::m_destroyed	./server/GameBullet.h	/^    bool m_destroyed = false;$/;"	m	class:GameBullet	access:protected
GameBullet::m_direction	./server/GameBullet.h	/^    game::Direction m_direction;$/;"	m	class:GameBullet	access:protected
GameBullet::m_ownerId	./server/GameBullet.h	/^    u32 m_ownerId;$/;"	m	class:GameBullet	access:protected
GameBullet::m_position	./server/GameBullet.h	/^    vector2f m_position;$/;"	m	class:GameBullet	access:protected
GameBullet::m_power	./server/GameBullet.h	/^	u32 m_power;$/;"	m	class:GameBullet	access:protected
GameBullet::m_radius	./server/GameBullet.h	/^    vector2i m_radius;$/;"	m	class:GameBullet	access:protected
GameBullet::m_speed	./server/GameBullet.h	/^    f32 m_speed;$/;"	m	class:GameBullet	access:protected
GameBullet::m_velocity	./server/GameBullet.h	/^    vector2f m_velocity;$/;"	m	class:GameBullet	access:protected
GameBullet::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:GameBullet	access:public
GameBullet::ownerId	./autocode/demo.hpp	/^    unsigned int ownerId;$/;"	m	struct:GameBullet	access:public
GameBullet::ownerId	./server/GameBullet.h	/^    u32 ownerId() const { return m_ownerId; }$/;"	f	class:GameBullet	access:public	signature:() const
GameBullet::position	./server/GameBullet.h	/^    const vector2f & position() const { return m_position; }$/;"	f	class:GameBullet	access:public	signature:() const
GameBullet::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:GameBullet	access:public
GameBullet::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:GameBullet	access:public
GameBullet::radius	./server/GameBullet.h	/^    const vector2i & radius() const { return m_radius; }$/;"	f	class:GameBullet	access:public	signature:() const
GameBullet::snapshot	./server/GameBullet.cpp	/^void GameBullet::snapshot(pkt::Game &game) {$/;"	f	class:GameBullet	signature:(pkt::Game &game)
GameBullet::speed	./autocode/demo.hpp	/^    f32 speed;$/;"	m	struct:GameBullet	access:public
GameBullet::update	./server/GameBullet.cpp	/^void GameBullet::update(f32 deltaTime)$/;"	f	class:GameBullet	signature:(f32 deltaTime)
GameDynamicEntity	./server/GameDynamicEntity.h	/^class GameDynamicEntity : public GameEntity {$/;"	c	inherits:GameEntity
GameDynamicEntity::_Move	./server/GameDynamicEntity.cpp	/^void GameDynamicEntity::_Move(const vector2f &newPos)$/;"	f	class:GameDynamicEntity	signature:(const vector2f &newPos)
GameDynamicEntity::_updateMovement	./server/GameDynamicEntity.cpp	/^bool GameDynamicEntity::_updateMovement(f32 deltaTime) {$/;"	f	class:GameDynamicEntity	signature:(f32 deltaTime)
GameDynamicEntity::canMove	./server/GameDynamicEntity.cpp	/^bool GameDynamicEntity::canMove(const vector2f &newPos)$/;"	f	class:GameDynamicEntity	signature:(const vector2f &newPos)
GameDynamicEntity::m_velocity	./server/GameDynamicEntity.h	/^    vector2f m_velocity;$/;"	m	class:GameDynamicEntity	access:protected
GameDynamicEntity::setVelocity	./server/GameDynamicEntity.h	/^    void setVelocity(const vector2f &v) { m_velocity = v; }$/;"	f	class:GameDynamicEntity	access:public	signature:(const vector2f &v)
GameDynamicEntity::velocity	./server/GameDynamicEntity.h	/^    const vector2f & velocity() const { return m_velocity; }$/;"	f	class:GameDynamicEntity	access:public	signature:() const
GameEntity	./server/GameEntity.cpp	/^GameEntity::GameEntity(Game *_game, const vector2f &_position, const vector2i &_radius)$/;"	f	class:GameEntity	signature:(Game *_game, const vector2f &_position, const vector2i &_radius)
GameEntity	./server/GameEntity.h	/^	GameEntity(Game *_game) :GameObject(_game)$/;"	f	class:GameEntity	access:public	signature:(Game *_game)
GameEntity	./server/GameEntity.h	/^class GameEntity : public GameObject {$/;"	c	inherits:GameObject
GameEntity::GameEntity	./server/GameEntity.cpp	/^GameEntity::GameEntity(Game *_game, const vector2f &_position, const vector2i &_radius)$/;"	f	class:GameEntity	signature:(Game *_game, const vector2f &_position, const vector2i &_radius)
GameEntity::GameEntity	./server/GameEntity.h	/^	GameEntity(Game *_game) :GameObject(_game)$/;"	f	class:GameEntity	access:public	signature:(Game *_game)
GameEntity::fini	./server/GameEntity.cpp	/^void GameEntity::fini() {$/;"	f	class:GameEntity	signature:()
GameEntity::init	./server/GameEntity.cpp	/^void GameEntity::init() $/;"	f	class:GameEntity	signature:()
GameEntity::m_position	./server/GameEntity.h	/^    vector2f m_position;$/;"	m	class:GameEntity	access:protected
GameEntity::m_radius	./server/GameEntity.h	/^    vector2i m_radius;$/;"	m	class:GameEntity	access:protected
GameEntity::position	./server/GameEntity.h	/^    const vector2f & position() const { return m_position; }$/;"	f	class:GameEntity	access:public	signature:() const
GameEntity::radius	./server/GameEntity.h	/^    const vector2i & radius() const { return m_radius; }$/;"	f	class:GameEntity	access:public	signature:() const
GameObject	./server/GameObject.cpp	/^GameObject::GameObject(Game *_game)$/;"	f	class:GameObject	signature:(Game *_game)
GameObject	./server/GameObject.cpp	/^GameObject::GameObject(const GameObject &rhs)$/;"	f	class:GameObject	signature:(const GameObject &rhs)
GameObject	./server/GameObject.h	/^	GameObject(){};$/;"	f	class:GameObject	access:public	signature:()
GameObject	./server/GameObject.h	/^class GameObject : public RefCounted {$/;"	c	inherits:RefCounted
GameObject::GameObject	./server/GameObject.cpp	/^GameObject::GameObject(Game *_game)$/;"	f	class:GameObject	signature:(Game *_game)
GameObject::GameObject	./server/GameObject.cpp	/^GameObject::GameObject(const GameObject &rhs)$/;"	f	class:GameObject	signature:(const GameObject &rhs)
GameObject::GameObject	./server/GameObject.h	/^	GameObject(){};$/;"	f	class:GameObject	access:public	signature:()
GameObject::Init	./server/GameObject.cpp	/^void GameObject::Init(TiXmlElement* e)$/;"	f	class:GameObject	signature:(TiXmlElement* e)
GameObject::fini	./server/GameObject.h	/^	virtual void fini() {}$/;"	f	class:GameObject	access:public	signature:()
GameObject::init	./server/GameObject.h	/^    virtual void init() $/;"	f	class:GameObject	access:public	signature:()
GameObject::m_game	./server/GameObject.h	/^    Game *m_game;$/;"	m	class:GameObject	access:protected
GameObject::m_objectId	./server/GameObject.h	/^    u32 m_objectId;$/;"	m	class:GameObject	access:protected
GameObject::objectId	./server/GameObject.h	/^    u32 objectId() const { return m_objectId; }$/;"	f	class:GameObject	access:public	signature:() const
GameObject::snapshot	./server/GameObject.h	/^    virtual void snapshot(pkt::Game &game) {}$/;"	f	class:GameObject	access:public	signature:(pkt::Game &game)
GameObject::update	./server/GameObject.h	/^    virtual void update(f32 deltaTime) {}$/;"	f	class:GameObject	access:public	signature:(f32 deltaTime)
GameObjectManager	./server/GameObjectManager.h	/^class GameObjectManager  {$/;"	c
GameObjectManager::CreateElement	./server/GameObjectManager.cpp	/^GameObject *  GameObjectManager::CreateElement(const  str8  &name, Game * pGame)$/;"	f	class:GameObjectManager	signature:(const str8 &name, Game * pGame)
GameObjectManager::createGameObjectToMap	./server/GameObjectManager.cpp	/^void GameObjectManager::createGameObjectToMap(TiXmlElement* root, Game *pGame)$/;"	f	class:GameObjectManager	signature:(TiXmlElement* root, Game *pGame)
GameObjectPtr	./server/GameObject.h	/^typedef RefCountedPtr<GameObject> GameObjectPtr;$/;"	t
GamePlayer	./autocode/demo.hpp	/^struct GamePlayer {$/;"	s
GamePlayer	./server/GamePlayer.cpp	/^GamePlayer::GamePlayer(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)$/;"	f	class:GamePlayer	signature:(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)
GamePlayer	./server/GamePlayer.h	/^class GamePlayer : public GameTank$/;"	c	inherits:GameTank
GamePlayer::GamePlayer	./server/GamePlayer.cpp	/^GamePlayer::GamePlayer(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)$/;"	f	class:GamePlayer	signature:(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)
GamePlayer::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GamePlayer	access:public	signature:(Variable_object &_vobj)
GamePlayer::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GamePlayer	access:public	signature:(Variable_object &_vobj) const
GamePlayer::addScore	./server/GamePlayer.h	/^	void addScore(unsigned int _score)$/;"	f	class:GamePlayer	access:public	signature:(unsigned int _score)
GamePlayer::getScore	./server/GamePlayer.h	/^	unsigned int getScore()const$/;"	f	class:GamePlayer	access:public	signature:() const
GamePlayer::m_playerSeat	./server/GamePlayer.h	/^    size_t m_playerSeat = 0;$/;"	m	class:GamePlayer	access:protected
GamePlayer::m_score	./server/GamePlayer.h	/^	unsigned int m_score = 0;$/;"	m	class:GamePlayer	access:protected
GamePlayer::playerSeat	./server/GamePlayer.h	/^	size_t playerSeat() const { return m_playerSeat; }$/;"	f	class:GamePlayer	access:public	signature:() const
GamePlayer::seat	./autocode/demo.hpp	/^    unsigned int seat;$/;"	m	struct:GamePlayer	access:public
GamePlayer::setScore	./server/GamePlayer.h	/^	void setScore(unsigned int _score)$/;"	f	class:GamePlayer	access:public	signature:(unsigned int _score)
GamePlayer::snapshot	./server/GamePlayer.cpp	/^void GamePlayer::snapshot(pkt::Game &game) {$/;"	f	class:GamePlayer	signature:(pkt::Game &game)
GamePlayer::tank	./autocode/demo.hpp	/^    GameTank tank;$/;"	m	struct:GamePlayer	access:public
GamePlayerPtr	./server/GamePlayer.h	/^typedef RefCountedPtr<GamePlayer> GamePlayerPtr;$/;"	t
GameStaticEntity	./server/GameStaticEntity.h	/^class GameStaticEntity : public GameEntity {$/;"	c	inherits:GameEntity
GameTank	./autocode/demo.hpp	/^struct GameTank {$/;"	s
GameTank	./server/GameTank.cpp	/^GameTank::GameTank(Game *_game) :GameDynamicEntity(_game)$/;"	f	class:GameTank	signature:(Game *_game)
GameTank	./server/GameTank.cpp	/^GameTank::GameTank(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, u32 _hp)$/;"	f	class:GameTank	signature:(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, u32 _hp)
GameTank	./server/GameTank.h	/^class GameTank : public GameDynamicEntity {$/;"	c	inherits:GameDynamicEntity
GameTank::GameTank	./server/GameTank.cpp	/^GameTank::GameTank(Game *_game) :GameDynamicEntity(_game)$/;"	f	class:GameTank	signature:(Game *_game)
GameTank::GameTank	./server/GameTank.cpp	/^GameTank::GameTank(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, u32 _hp)$/;"	f	class:GameTank	signature:(Game *_game, const vector2f &_pos, game::Direction _dir, f32 _speed, u32 _hp)
GameTank::Init	./server/GameTank.cpp	/^void GameTank::Init(TiXmlElement* e)$/;"	f	class:GameTank	signature:(TiXmlElement* e)
GameTank::State	./server/GameTank.h	/^    enum State {$/;"	g	class:GameTank	access:public
GameTank::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GameTank	access:public	signature:(Variable_object &_vobj)
GameTank::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GameTank	access:public	signature:(Variable_object &_vobj) const
GameTank::_setDirection	./server/GameTank.cpp	/^void GameTank::_setDirection(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
GameTank::_snapshot	./server/GameTank.cpp	/^void GameTank::_snapshot(pkt::GameTank &tank) {$/;"	f	class:GameTank	signature:(pkt::GameTank &tank)
GameTank::canMove	./server/GameTank.cpp	/^bool GameTank::canMove(const vector2f &newPos)$/;"	f	class:GameTank	signature:(const vector2f &newPos)
GameTank::direction	./autocode/demo.hpp	/^    unsigned int direction;$/;"	m	struct:GameTank	access:public
GameTank::direction	./server/GameTank.h	/^    game::Direction direction() const { return m_direction; }$/;"	f	class:GameTank	access:public	signature:() const
GameTank::fireCommonAttack	./server/GameTank.cpp	/^void GameTank::fireCommonAttack(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
GameTank::firePowerAttack	./server/GameTank.cpp	/^void GameTank::firePowerAttack(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
GameTank::getHP	./server/GameTank.h	/^	u32 getHP()const$/;"	f	class:GameTank	access:public	signature:() const
GameTank::init	./server/GameTank.cpp	/^void GameTank::init()$/;"	f	class:GameTank	signature:()
GameTank::kIdle	./server/GameTank.h	/^        kIdle = 0,$/;"	e	enum:GameTank::State
GameTank::kMoving	./server/GameTank.h	/^        kMoving,$/;"	e	enum:GameTank::State
GameTank::m_broadcastState	./server/GameTank.h	/^    f32 m_broadcastState = kIdle;$/;"	m	class:GameTank	access:protected
GameTank::m_broadcastTimer	./server/GameTank.h	/^	f32 m_broadcastTimer = 0;$/;"	m	class:GameTank	access:protected
GameTank::m_commonAttackInterval	./server/GameTank.h	/^	f32 m_commonAttackInterval = 0.5f;$/;"	m	class:GameTank	access:protected
GameTank::m_commonAttackTimer	./server/GameTank.h	/^	f32 m_commonAttackTimer = 0;$/;"	m	class:GameTank	access:protected
GameTank::m_direction	./server/GameTank.h	/^    game::Direction m_direction = game::kD_PX;$/;"	m	class:GameTank	access:protected
GameTank::m_hp	./server/GameTank.h	/^	u32 m_hp=4;$/;"	m	class:GameTank	access:protected
GameTank::m_initHp	./server/GameTank.h	/^	u32 m_initHp;$/;"	m	class:GameTank	access:protected
GameTank::m_initPosition	./server/GameTank.h	/^	vector2f m_initPosition;$/;"	m	class:GameTank	access:protected
GameTank::m_maxSpeed	./server/GameTank.h	/^	f32 m_maxSpeed = 12;$/;"	m	class:GameTank	access:protected
GameTank::m_movingTimer	./server/GameTank.h	/^	f32 m_movingTimer = 0;$/;"	m	class:GameTank	access:protected
GameTank::m_powerAttackInterval	./server/GameTank.h	/^	f32 m_powerAttackInterval = 1.0f;$/;"	m	class:GameTank	access:protected
GameTank::m_powerAttackTimer	./server/GameTank.h	/^	f32 m_powerAttackTimer = 0;$/;"	m	class:GameTank	access:protected
GameTank::m_speed	./server/GameTank.h	/^	f32 m_speed = 5;$/;"	m	class:GameTank	access:protected
GameTank::m_state	./server/GameTank.h	/^    State m_state = kIdle;$/;"	m	class:GameTank	access:protected
GameTank::move	./server/GameTank.cpp	/^void GameTank::move(game::Direction _dir, f32 _time) {$/;"	f	class:GameTank	signature:(game::Direction _dir, f32 _time)
GameTank::objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:GameTank	access:public
GameTank::positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:GameTank	access:public
GameTank::positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:GameTank	access:public
GameTank::resetHp	./server/GameTank.h	/^	void resetHp()$/;"	f	class:GameTank	access:public	signature:()
GameTank::resetPosition	./server/GameTank.cpp	/^void GameTank::resetPosition()$/;"	f	class:GameTank	signature:()
GameTank::setHP	./server/GameTank.h	/^	void setHP(u32 _hp)$/;"	f	class:GameTank	access:public	signature:(u32 _hp)
GameTank::setSeed	./server/GameTank.cpp	/^void GameTank::setSeed(f32 _speed)$/;"	f	class:GameTank	signature:(f32 _speed)
GameTank::speed	./autocode/demo.hpp	/^    f32 speed;$/;"	m	struct:GameTank	access:public
GameTank::speed	./server/GameTank.h	/^    f32 speed() const { return m_speed; }$/;"	f	class:GameTank	access:public	signature:() const
GameTank::stop	./server/GameTank.cpp	/^void GameTank::stop() {$/;"	f	class:GameTank	signature:()
GameTank::update	./server/GameTank.cpp	/^void GameTank::update(f32 deltaTime) {$/;"	f	class:GameTank	signature:(f32 deltaTime)
GetChar	./server/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
GetDocument	./server/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
GetDocument	./server/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
GetEntity	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
GetText	./server/tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
GetUserData	./server/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
GetUserData	./server/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
ID	./autocode/demo.hpp	/^    enum { ID = 10 };$/;"	e	enum:req_login::__anon1
ID	./autocode/demo.hpp	/^    enum { ID = 1000 };$/;"	e	enum:req_createDemoRoom::__anon43
ID	./autocode/demo.hpp	/^    enum { ID = 1001 };$/;"	e	enum:res_createDemoRoomOk::__anon44
ID	./autocode/demo.hpp	/^    enum { ID = 1002 };$/;"	e	enum:res_createDemoRoomFailed::__anon45
ID	./autocode/demo.hpp	/^    enum { ID = 1010 };$/;"	e	enum:req_endDemoGame::__anon46
ID	./autocode/demo.hpp	/^    enum { ID = 11 };$/;"	e	enum:res_loginOk::__anon2
ID	./autocode/demo.hpp	/^    enum { ID = 12 };$/;"	e	enum:res_loginFailed::__anon3
ID	./autocode/demo.hpp	/^    enum { ID = 13 };$/;"	e	enum:res_loginAnother::__anon4
ID	./autocode/demo.hpp	/^    enum { ID = 20 };$/;"	e	enum:req_getPlayerBaseInfo::__anon5
ID	./autocode/demo.hpp	/^    enum { ID = 201 };$/;"	e	enum:res_playerExitRoom::__anon26
ID	./autocode/demo.hpp	/^    enum { ID = 202 };$/;"	e	enum:res_playerEnterRoom::__anon27
ID	./autocode/demo.hpp	/^    enum { ID = 203 };$/;"	e	enum:res_gameStart::__anon28
ID	./autocode/demo.hpp	/^    enum { ID = 204 };$/;"	e	enum:res_gameEnd::__anon29
ID	./autocode/demo.hpp	/^    enum { ID = 205 };$/;"	e	enum:res_tankMove::__anon30
ID	./autocode/demo.hpp	/^    enum { ID = 206 };$/;"	e	enum:res_tankStop::__anon31
ID	./autocode/demo.hpp	/^    enum { ID = 207 };$/;"	e	enum:res_tankCommonAttack::__anon32
ID	./autocode/demo.hpp	/^    enum { ID = 208 };$/;"	e	enum:res_bulletOutOfMap::__anon34
ID	./autocode/demo.hpp	/^    enum { ID = 209 };$/;"	e	enum:res_bulletCollideBullet::__anon35
ID	./autocode/demo.hpp	/^    enum { ID = 21 };$/;"	e	enum:res_playerBaseInfo::__anon6
ID	./autocode/demo.hpp	/^    enum { ID = 210 };$/;"	e	enum:res_bulletCollideEntity::__anon36
ID	./autocode/demo.hpp	/^    enum { ID = 211 };$/;"	e	enum:res_gameBack::__anon37
ID	./autocode/demo.hpp	/^    enum { ID = 212 };$/;"	e	enum:res_gameTimeStamp::__anon38
ID	./autocode/demo.hpp	/^    enum { ID = 217 };$/;"	e	enum:res_tankPowerAttack::__anon33
ID	./autocode/demo.hpp	/^    enum { ID = 30 };$/;"	e	enum:req_setPlayerName::__anon7
ID	./autocode/demo.hpp	/^    enum { ID = 300 };$/;"	e	enum:res_destoryObject::__anon39
ID	./autocode/demo.hpp	/^    enum { ID = 31 };$/;"	e	enum:res_setPlayerNameOk::__anon8
ID	./autocode/demo.hpp	/^    enum { ID = 310 };$/;"	e	enum:res_bulletCollideMask::__anon40
ID	./autocode/demo.hpp	/^    enum { ID = 311 };$/;"	e	enum:res_bulletCollideTank::__anon41
ID	./autocode/demo.hpp	/^    enum { ID = 312 };$/;"	e	enum:res_createProperty::__anon24
ID	./autocode/demo.hpp	/^    enum { ID = 313 };$/;"	e	enum:res_getProperty::__anon25
ID	./autocode/demo.hpp	/^    enum { ID = 32 };$/;"	e	enum:res_setPlayerNameFailed::__anon9
ID	./autocode/demo.hpp	/^    enum { ID = 40 };$/;"	e	enum:req_exitRoom::__anon10
ID	./autocode/demo.hpp	/^    enum { ID = 400 };$/;"	e	enum:res_bulletdestoryObject::__anon42
ID	./autocode/demo.hpp	/^    enum { ID = 41 };$/;"	e	enum:res_exitRoomOk::__anon11
ID	./autocode/demo.hpp	/^    enum { ID = 42 };$/;"	e	enum:res_exitRoomFailed::__anon12
ID	./autocode/demo.hpp	/^    enum { ID = 50 };$/;"	e	enum:req_enterRoom::__anon13
ID	./autocode/demo.hpp	/^    enum { ID = 51 };$/;"	e	enum:res_enterRoomOk::__anon14
ID	./autocode/demo.hpp	/^    enum { ID = 52 };$/;"	e	enum:res_enterRoomFailed::__anon15
ID	./autocode/demo.hpp	/^    enum { ID = 60 };$/;"	e	enum:req_startGame::__anon16
ID	./autocode/demo.hpp	/^    enum { ID = 61 };$/;"	e	enum:res_startGameFailed::__anon17
ID	./autocode/demo.hpp	/^    enum { ID = 62 };$/;"	e	enum:req_tankMove::__anon18
ID	./autocode/demo.hpp	/^    enum { ID = 63 };$/;"	e	enum:req_tankStop::__anon19
ID	./autocode/demo.hpp	/^    enum { ID = 64 };$/;"	e	enum:req_tankCommonAttack::__anon20
ID	./autocode/demo.hpp	/^    enum { ID = 65 };$/;"	e	enum:req_backGame::__anon22
ID	./autocode/demo.hpp	/^    enum { ID = 66 };$/;"	e	enum:res_backGameFailed::__anon23
ID	./autocode/demo.hpp	/^    enum { ID = 67 };$/;"	e	enum:req_tankPowerAttack::__anon21
IMPL_SERVER_APP	./common/ServerApp.h	65;"	d
Identify	./server/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
Indent	./server/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
Info	./server/Room.h	/^	struct Info {$/;"	s	class:Room	access:private
Init	./server/CGrass.cpp	/^void CGrass::Init(TiXmlElement* e)$/;"	f	class:CGrass	signature:(TiXmlElement* e)
Init	./server/CProtectMask.cpp	/^void CProtectMask::Init(TiXmlElement* e)$/;"	f	class:CProtectMask	signature:(TiXmlElement* e)
Init	./server/CRiver.cpp	/^void CRiver::Init(TiXmlElement* e)$/;"	f	class:CRiver	signature:(TiXmlElement* e)
Init	./server/CWall.cpp	/^void CWall::Init(TiXmlElement* e)$/;"	f	class:CWall	signature:(TiXmlElement* e)
Init	./server/GameBullet.cpp	/^void GameBullet::Init(TiXmlElement* e)$/;"	f	class:GameBullet	signature:(TiXmlElement* e)
Init	./server/GameObject.cpp	/^void GameObject::Init(TiXmlElement* e)$/;"	f	class:GameObject	signature:(TiXmlElement* e)
Init	./server/GameTank.cpp	/^void GameTank::Init(TiXmlElement* e)$/;"	f	class:GameTank	signature:(TiXmlElement* e)
InsertAfterChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
InsertBeforeChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
InsertEndChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
IntValue	./server/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
IsAlpha	./server/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsAlphaNum	./server/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
IsWhiteSpace	./server/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase	access:protected	signature:( char c )
IsWhiteSpace	./server/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
IsWhiteSpaceCondensed	./server/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
IterateChildren	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
IterateChildren	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
IterateChildren	./server/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
Last	./server/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
Last	./server/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
LastAttribute	./server/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
LastAttribute	./server/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
LastChild	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
LastChild	./server/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
LastChild	./server/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
LineBreak	./server/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
LinkEndChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
LinkManager	./server/LinkManager.h	/^class LinkManager : public Singleton<LinkManager> $/;"	c	inherits:Singleton
LinkManager::add	./server/LinkManager.cpp	/^void LinkManager::add(Link_TCP_Connection *link) {$/;"	f	class:LinkManager	signature:(Link_TCP_Connection *link)
LinkManager::closeAll	./server/LinkManager.cpp	/^void LinkManager::closeAll() {$/;"	f	class:LinkManager	signature:()
LinkManager::m_links	./server/LinkManager.h	/^    std::set<Link_TCP_Connection *> m_links;$/;"	m	class:LinkManager	access:private
LinkManager::m_lock	./server/LinkManager.h	/^    SpinLock m_lock;$/;"	m	class:LinkManager	access:private
LinkManager::remove	./server/LinkManager.cpp	/^void LinkManager::remove(Link_TCP_Connection *link) {$/;"	f	class:LinkManager	signature:(Link_TCP_Connection *link)
LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
LoadFile	./server/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
LogPrinterFile	./common/LogPrinter.cpp	/^LogPrinterFile::LogPrinterFile(str8 path)$/;"	f	class:LogPrinterFile	signature:(str8 path)
LogPrinterFile	./common/LogPrinter.h	/^class LogPrinterFile : public LogPrinter {$/;"	c	inherits:LogPrinter
LogPrinterFile::LogPrinterFile	./common/LogPrinter.cpp	/^LogPrinterFile::LogPrinterFile(str8 path)$/;"	f	class:LogPrinterFile	signature:(str8 path)
LogPrinterFile::m_path	./common/LogPrinter.h	/^    str8 m_path;$/;"	m	class:LogPrinterFile	access:protected
LogPrinterFile::print	./common/LogPrinter.cpp	/^void LogPrinterFile::print(Log::Level l, const c8 *, int, str8 &&s) {$/;"	f	class:LogPrinterFile	signature:(Log::Level l, const c8 *, int, str8 &&s)
MAX_ENTITY_LENGTH	./server/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon49
MyTest	./MyTest.h	/^class MyTest$/;"	c
MyTest::test1	./MyTest.cpp	/^void MyTest::test1()$/;"	f	class:MyTest	signature:()
MyTest::test2	./MyTest.cpp	/^void MyTest::test2()$/;"	f	class:MyTest	signature:()
NUM_ENTITY	./server/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon49
Name	./server/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
NameTStr	./server/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
Next	./server/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
Next	./server/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
NextSibling	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
NextSibling	./server/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NextSibling	./server/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
NextSiblingElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
NextSiblingElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
NextSiblingElement	./server/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
NoChildren	./server/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Node	./server/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
NodeType	./server/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode	access:public
ObjectBlock	./server/Game.h	/^        ObjectBlock(GameObjectPtr &&_obj) : obj(std::move(_obj)) {}$/;"	f	struct:Game::ObjectBlock	access:public	signature:(GameObjectPtr &&_obj)
ObjectBlock	./server/Game.h	/^        ObjectBlock(ObjectBlock &&v) : obj(std::move(v.obj)), it(std::move(v.it)) {}$/;"	f	struct:Game::ObjectBlock	access:public	signature:(ObjectBlock &&v)
ObjectBlock	./server/Game.h	/^    struct ObjectBlock  {$/;"	s	class:Game	access:protected
ObjectIndexBlock	./server/Game.h	/^    struct ObjectIndexBlock {$/;"	s	class:Game	access:protected
Parent	./server/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
Parent	./server/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Player	./server/Player.h	/^    Player(u32 pid) : m_playerId(pid) {}$/;"	f	class:Player	access:public	signature:(u32 pid)
Player	./server/Player.h	/^class Player : public AsyncObject {$/;"	c	inherits:AsyncObject
Player::Player	./server/Player.h	/^    Player(u32 pid) : m_playerId(pid) {}$/;"	f	class:Player	access:public	signature:(u32 pid)
Player::async	./server/Player.cpp	/^void Player::async(std::function<void()>  fn) {$/;"	f	class:Player	signature:(std::function<void()> fn)
Player::async_backGame	./server/Player.cpp	/^void Player::async_backGame() {$/;"	f	class:Player	signature:()
Player::async_createDemoRoom	./server/Player.cpp	/^void Player::async_createDemoRoom() {$/;"	f	class:Player	signature:()
Player::async_disconnected	./server/Player.cpp	/^void Player::async_disconnected() {$/;"	f	class:Player	signature:()
Player::async_enterRoom	./server/Player.cpp	/^void Player::async_enterRoom(str8 roomName) {$/;"	f	class:Player	signature:(str8 roomName)
Player::async_login	./server/Player.cpp	/^void Player::async_login(RefCountedPtr<PublicLink> link) {$/;"	f	class:Player	signature:(RefCountedPtr<PublicLink> link)
Player::async_loginNew	./server/Player.cpp	/^void Player::async_loginNew(RefCountedPtr<PublicLink> link) {$/;"	f	class:Player	signature:(RefCountedPtr<PublicLink> link)
Player::async_notify_destroyRoom	./server/Player.cpp	/^void Player::async_notify_destroyRoom() {$/;"	f	class:Player	signature:()
Player::async_notify_destroyRoomNoMsg	./server/Player.cpp	/^void Player::async_notify_destroyRoomNoMsg() {$/;"	f	class:Player	signature:()
Player::async_notify_enterRoom	./server/Player.cpp	/^void Player::async_notify_enterRoom(RefCountedPtr<Room> room) {$/;"	f	class:Player	signature:(RefCountedPtr<Room> room)
Player::async_notify_exitRoom	./server/Player.cpp	/^void Player::async_notify_exitRoom() {$/;"	f	class:Player	signature:()
Player::async_notify_reloginRoom	./server/Player.cpp	/^void Player::async_notify_reloginRoom(bool ok) {$/;"	f	class:Player	signature:(bool ok)
Player::async_sendPlayerBaseInfo	./server/Player.cpp	/^void Player::async_sendPlayerBaseInfo() {$/;"	f	class:Player	signature:()
Player::async_setName	./server/Player.cpp	/^void Player::async_setName(str8 name) {$/;"	f	class:Player	signature:(str8 name)
Player::m_initialized	./server/Player.h	/^    bool m_initialized = false;$/;"	m	class:Player	access:protected
Player::m_isInRoom	./server/Player.h	/^    bool m_isInRoom = false;$/;"	m	class:Player	access:protected
Player::m_link	./server/Player.h	/^    PublicLinkPtr m_link;$/;"	m	class:Player	access:protected
Player::m_playerId	./server/Player.h	/^    u32 m_playerId;$/;"	m	class:Player	access:protected
Player::m_playerName	./server/Player.h	/^    str8 m_playerName;$/;"	m	class:Player	access:protected
Player::m_room	./server/Player.h	/^    RefCountedPtr<Room> m_room;$/;"	m	class:Player	access:protected
Player::playerId	./server/Player.h	/^    u32 playerId() const { return m_playerId; }$/;"	f	class:Player	access:public	signature:() const
Player::playerName	./server/Player.h	/^    const str8 & playerName() const { return m_playerName; }$/;"	f	class:Player	access:public	signature:() const
PlayerInfo	./server/DBManager.h	/^        PlayerInfo(PlayerInfo &&rhs): playerName(std::move(rhs.playerName)) {}$/;"	f	struct:DBManager::PlayerInfo	access:public	signature:(PlayerInfo &&rhs)
PlayerInfo	./server/DBManager.h	/^    struct PlayerInfo {$/;"	s	class:DBManager	access:public
PlayerManager	./server/PlayerManager.cpp	/^PlayerManager::PlayerManager()$/;"	f	class:PlayerManager	signature:()
PlayerManager	./server/PlayerManager.h	/^class PlayerManager : public Singleton<PlayerManager> {$/;"	c	inherits:Singleton
PlayerManager::PlayerManager	./server/PlayerManager.cpp	/^PlayerManager::PlayerManager()$/;"	f	class:PlayerManager	signature:()
PlayerManager::get	./server/PlayerManager.cpp	/^PlayerPtr PlayerManager::get(u32 playerId) {$/;"	f	class:PlayerManager	signature:(u32 playerId)
PlayerManager::m_lock	./server/PlayerManager.h	/^	SpinLock m_lock;$/;"	m	class:PlayerManager	access:private
PlayerManager::m_loop	./server/PlayerManager.h	/^	RunLoop m_loop;$/;"	m	class:PlayerManager	access:private
PlayerManager::m_players	./server/PlayerManager.h	/^	std::map<u32, PlayerPtr> m_players;$/;"	m	class:PlayerManager	access:private
PlayerManager::m_thread	./server/PlayerManager.h	/^    std::thread m_thread;$/;"	m	class:PlayerManager	access:private
PlayerManager::post	./server/PlayerManager.cpp	/^void PlayerManager::post(std::function<void()> fn) {$/;"	f	class:PlayerManager	signature:(std::function<void()> fn)
PlayerManager::remove	./server/PlayerManager.cpp	/^void PlayerManager::remove(u32 playerId) {$/;"	f	class:PlayerManager	signature:(u32 playerId)
PlayerManager::~PlayerManager	./server/PlayerManager.cpp	/^PlayerManager::~PlayerManager() {$/;"	f	class:PlayerManager	signature:()
PlayerPtr	./server/Player.h	/^typedef RefCountedPtr<Player> PlayerPtr;$/;"	t
PlayerRank	./autocode/demo.hpp	/^struct PlayerRank {$/;"	s
PlayerRank::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:PlayerRank	access:public	signature:(Variable_object &_vobj)
PlayerRank::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:PlayerRank	access:public	signature:(Variable_object &_vobj) const
PlayerRank::scores	./autocode/demo.hpp	/^    unsigned int scores;$/;"	m	struct:PlayerRank	access:public
PlayerRank::seat	./autocode/demo.hpp	/^    unsigned int seat;$/;"	m	struct:PlayerRank	access:public
Previous	./server/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
Previous	./server/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
PreviousSibling	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
PreviousSibling	./server/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
PreviousSibling	./server/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Print	./server/tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	./server/tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
Print	./server/tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
Print	./server/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
PublicLink	./server/PublicLink.h	/^class PublicLink : public Link_TCP_Connection, public AsyncObject {$/;"	c	inherits:Link_TCP_Connection,AsyncObject
PublicLink::SentAction	./server/PublicLink.h	/^    enum SentAction {$/;"	g	class:PublicLink	access:public
PublicLink::_console_recv	./server/PublicLink.cpp	/^void PublicLink::_console_recv(LinkBufferPtr buffers) {$/;"	f	class:PublicLink	signature:(LinkBufferPtr buffers)
PublicLink::_console_send	./server/PublicLink.cpp	/^void PublicLink::_console_send(const Packet &pkt, SentAction sa) {$/;"	f	class:PublicLink	signature:(const Packet &pkt, SentAction sa)
PublicLink::_destroy	./server/PublicLink.cpp	/^void PublicLink::_destroy() $/;"	f	class:PublicLink	signature:()
PublicLink::_disconnected	./server/PublicLink.cpp	/^void PublicLink::_disconnected() {$/;"	f	class:PublicLink	signature:()
PublicLink::_init	./server/PublicLink.cpp	/^void PublicLink::_init() $/;"	f	class:PublicLink	signature:()
PublicLink::_received	./server/PublicLink.cpp	/^void PublicLink::_received(LinkBufferPtr buffers) {$/;"	f	class:PublicLink	signature:(LinkBufferPtr buffers)
PublicLink::_sent	./server/PublicLink.cpp	/^void PublicLink::_sent(size_t bytes, void *tag) {$/;"	f	class:PublicLink	signature:(size_t bytes, void *tag)
PublicLink::async	./server/PublicLink.cpp	/^void PublicLink::async(std::function<void()> fn) {$/;"	f	class:PublicLink	signature:(std::function<void()> fn)
PublicLink::kSA_Close	./server/PublicLink.h	/^        kSA_Close$/;"	e	enum:PublicLink::SentAction
PublicLink::kSA_None	./server/PublicLink.h	/^        kSA_None = 0,$/;"	e	enum:PublicLink::SentAction
PublicLink::m_console_mode	./server/PublicLink.h	/^    bool m_console_mode = false;$/;"	m	class:PublicLink	access:private
PublicLink::m_login	./server/PublicLink.h	/^    bool m_login = false;$/;"	m	class:PublicLink	access:protected
PublicLink::m_packing	./server/PublicLink.h	/^    PackingStream m_packing;$/;"	m	class:PublicLink	access:protected
PublicLink::m_packingLock	./server/PublicLink.h	/^    SpinLock m_packingLock;$/;"	m	class:PublicLink	access:protected
PublicLink::m_peer	./server/PublicLink.h	/^    NetAddress m_peer;$/;"	m	class:PublicLink	access:private
PublicLink::m_player	./server/PublicLink.h	/^    Player *m_player;$/;"	m	class:PublicLink	access:protected
PublicLink::m_playerLock	./server/PublicLink.h	/^    SpinLock m_playerLock;$/;"	m	class:PublicLink	access:protected
PublicLink::m_room	./server/PublicLink.h	/^    Room *m_room;$/;"	m	class:PublicLink	access:protected
PublicLink::m_roomLock	./server/PublicLink.h	/^    SpinLock m_roomLock;$/;"	m	class:PublicLink	access:protected
PublicLink::m_room_seat	./server/PublicLink.h	/^    size_t m_room_seat = 0;$/;"	m	class:PublicLink	access:protected
PublicLink::m_unpacking	./server/PublicLink.h	/^    UnpackingStream m_unpacking;$/;"	m	class:PublicLink	access:protected
PublicLink::sendPacket	./server/PublicLink.cpp	/^void PublicLink::sendPacket(const Packet &pkt, SentAction sa) {$/;"	f	class:PublicLink	signature:(const Packet &pkt, SentAction sa)
PublicLink::sendPackets	./server/PublicLink.cpp	/^void PublicLink::sendPackets(const Packet &head, const std::vector<PacketPtr> &packets) {$/;"	f	class:PublicLink	signature:(const Packet &head, const std::vector<PacketPtr> &packets)
PublicLink::setPlayer	./server/PublicLink.cpp	/^void PublicLink::setPlayer(Player *player) {$/;"	f	class:PublicLink	signature:(Player *player)
PublicLink::setRoom	./server/PublicLink.cpp	/^void PublicLink::setRoom(Room *room, size_t seat) {$/;"	f	class:PublicLink	signature:(Room *room, size_t seat)
PublicLinkPtr	./server/PublicLink.h	/^typedef RefCountedPtr<PublicLink> PublicLinkPtr;$/;"	t
PublicListen	./server/PublicListen.h	/^class PublicListen : public Link_TCP_Listen {$/;"	c	inherits:Link_TCP_Listen
PublicListen::_accepted	./server/PublicListen.cpp	/^Link_TCP_Connection * PublicListen::_accepted(const NetAddress &peer) {$/;"	f	class:PublicListen	signature:(const NetAddress &peer)
PublicListen::_destroy	./server/PublicListen.cpp	/^void PublicListen::_destroy() {$/;"	f	class:PublicListen	signature:()
PublicListen::_init	./server/PublicListen.cpp	/^void PublicListen::_init() {$/;"	f	class:PublicListen	signature:()
QueryBoolAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
QueryDoubleAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
QueryDoubleAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
QueryDoubleValue	./server/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
QueryFloatAttribute	./server/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
QueryIntAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
QueryIntAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
QueryIntValue	./server/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
QueryStringAttribute	./server/tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, std::string* _value ) const
QueryUnsignedAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
QueryValueAttribute	./server/tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, std::string* outValue ) const
QueryValueAttribute	./server/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
REGISETER_PROPERTY	./server/CProperty.h	59;"	d
Rank	./autocode/demo.hpp	/^struct Rank {$/;"	s
Rank::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:Rank	access:public	signature:(Variable_object &_vobj)
Rank::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:Rank	access:public	signature:(Variable_object &_vobj) const
Rank::ranks	./autocode/demo.hpp	/^    std::vector<PlayerRank> ranks;$/;"	m	struct:Rank	access:public
ReadName	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
ReadText	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
ReadValue	./server/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
Remove	./server/tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
RemoveAttribute	./server/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
RemoveAttribute	./server/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
RemoveChild	./server/tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
ReplaceChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
Room	./server/Room.cpp	/^Room::Room(const str8 &_name)$/;"	f	class:Room	signature:(const str8 &_name)
Room	./server/Room.h	/^class Room : public AsyncObject {$/;"	c	inherits:AsyncObject
Room::Info	./server/Room.h	/^	struct Info {$/;"	s	class:Room	access:private
Room::Info::link	./server/Room.h	/^		PublicLinkPtr link;$/;"	m	struct:Room::Info	access:public
Room::Info::player	./server/Room.h	/^		PlayerPtr player;$/;"	m	struct:Room::Info	access:public
Room::Info::tank	./server/Room.h	/^        GamePlayerPtr tank;$/;"	m	struct:Room::Info	access:public
Room::Room	./server/Room.cpp	/^Room::Room(const str8 &_name)$/;"	f	class:Room	signature:(const str8 &_name)
Room::State	./server/Room.h	/^    enum State {$/;"	g	class:Room	access:public
Room::_destroy	./server/Room.cpp	/^void Room::_destroy() {$/;"	f	class:Room	signature:()
Room::_endDemoGame	./server/Room.cpp	/^void Room::_endDemoGame() $/;"	f	class:Room	signature:()
Room::_enter	./server/Room.cpp	/^void Room::_enter(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
Room::_game_broadcast	./server/Room.cpp	/^void Room::_game_broadcast(const std::vector<PacketPtr> &packets) {$/;"	f	class:Room	signature:(const std::vector<PacketPtr> &packets)
Room::_update	./server/Room.cpp	/^void Room::_update(f32 deltaTime) {$/;"	f	class:Room	signature:(f32 deltaTime)
Room::async	./server/Room.cpp	/^void Room::async(std::function<void()> fn) {$/;"	f	class:Room	signature:(std::function<void()> fn)
Room::async_backGame	./server/Room.cpp	/^void Room::async_backGame(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
Room::async_disconnected	./server/Room.cpp	/^void Room::async_disconnected(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
Room::async_endDemoGame	./server/Room.cpp	/^void Room::async_endDemoGame() {$/;"	f	class:Room	signature:()
Room::async_exit	./server/Room.cpp	/^void Room::async_exit(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
Room::async_fireCommonAttack	./server/Room.cpp	/^void Room::async_fireCommonAttack(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
Room::async_firePowerAttack	./server/Room.cpp	/^void Room::async_firePowerAttack(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
Room::async_initDemo	./server/Room.cpp	/^void Room::async_initDemo(PlayerPtr owner, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr owner, PublicLinkPtr link)
Room::async_moveTank	./server/Room.cpp	/^void Room::async_moveTank(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
Room::async_relogin	./server/Room.cpp	/^void Room::async_relogin(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
Room::async_startGame	./server/Room.cpp	/^void Room::async_startGame() $/;"	f	class:Room	signature:()
Room::async_stopTank	./server/Room.cpp	/^void Room::async_stopTank(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
Room::kFighting	./server/Room.h	/^        kFighting,$/;"	e	enum:Room::State
Room::kNotInit	./server/Room.h	/^        kNotInit = 0,$/;"	e	enum:Room::State
Room::kWaiting	./server/Room.h	/^        kWaiting,$/;"	e	enum:Room::State
Room::m_game	./server/Room.h	/^    std::unique_ptr<Game> m_game;$/;"	m	class:Room	access:private
Room::m_name	./server/Room.h	/^    str8 m_name;$/;"	m	class:Room	access:private
Room::m_player_count	./server/Room.h	/^    size_t m_player_count = 0;$/;"	m	class:Room	access:private
Room::m_players	./server/Room.h	/^    std::array<Info, 4> m_players;$/;"	m	class:Room	access:private
Room::m_state	./server/Room.h	/^    State m_state = kNotInit;$/;"	m	class:Room	access:private
Room::name	./server/Room.h	/^    const str8 & name() { return m_name; }$/;"	f	class:Room	access:public	signature:()
Room::~Room	./server/Room.cpp	/^Room::~Room() {$/;"	f	class:Room	signature:()
RoomManager	./server/RoomManager.cpp	/^RoomManager::RoomManager() {$/;"	f	class:RoomManager	signature:()
RoomManager	./server/RoomManager.h	/^class RoomManager : public Singleton<RoomManager> {$/;"	c	inherits:Singleton
RoomManager::RoomManager	./server/RoomManager.cpp	/^RoomManager::RoomManager() {$/;"	f	class:RoomManager	signature:()
RoomManager::_update	./server/RoomManager.cpp	/^void RoomManager::_update(f32 deltaTime) {$/;"	f	class:RoomManager	signature:(f32 deltaTime)
RoomManager::create	./server/RoomManager.cpp	/^RoomPtr RoomManager::create(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
RoomManager::destroy	./server/RoomManager.cpp	/^void RoomManager::destroy(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
RoomManager::destroyAll	./server/RoomManager.cpp	/^void RoomManager::destroyAll() {$/;"	f	class:RoomManager	signature:()
RoomManager::enter	./server/RoomManager.cpp	/^void RoomManager::enter(RoomPtr room, PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:RoomManager	signature:(RoomPtr room, PlayerPtr player, PublicLinkPtr link)
RoomManager::find	./server/RoomManager.cpp	/^RoomPtr RoomManager::find(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
RoomManager::m_loop	./server/RoomManager.h	/^    RunLoop m_loop;$/;"	m	class:RoomManager	access:private
RoomManager::m_roomIndex	./server/RoomManager.h	/^    std::map<str8, Room *> m_roomIndex;$/;"	m	class:RoomManager	access:private
RoomManager::m_roomIndexLock	./server/RoomManager.h	/^    ReadWriteLock m_roomIndexLock;$/;"	m	class:RoomManager	access:private
RoomManager::m_rooms	./server/RoomManager.h	/^    std::set<RoomPtr> m_rooms;$/;"	m	class:RoomManager	access:private
RoomManager::m_thread	./server/RoomManager.h	/^    std::unique_ptr<std::thread> m_thread;$/;"	m	class:RoomManager	access:private
RoomManager::post	./server/RoomManager.cpp	/^void RoomManager::post(std::function<void()> fn) {$/;"	f	class:RoomManager	signature:(std::function<void()> fn)
RoomManager::~RoomManager	./server/RoomManager.cpp	/^RoomManager::~RoomManager() {$/;"	f	class:RoomManager	signature:()
RoomPtr	./server/Room.h	/^typedef RefCountedPtr<Room> RoomPtr;$/;"	t
RoomSeatInfo	./autocode/demo.hpp	/^struct RoomSeatInfo {$/;"	s
RoomSeatInfo::_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:RoomSeatInfo	access:public	signature:(Variable_object &_vobj)
RoomSeatInfo::_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:RoomSeatInfo	access:public	signature:(Variable_object &_vobj) const
RoomSeatInfo::playerName	./autocode/demo.hpp	/^    str8 playerName;$/;"	m	struct:RoomSeatInfo	access:public
RoomSeatInfo::seat	./autocode/demo.hpp	/^    u8 seat;$/;"	m	struct:RoomSeatInfo	access:public
RootElement	./server/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
RootElement	./server/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Row	./server/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
SaveFile	./server/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
SentAction	./server/PublicLink.h	/^    enum SentAction {$/;"	g	class:PublicLink	access:public
ServerApp	./common/ServerApp.h	/^class ServerApp : public Singleton<ServerApp, ServerAppCreator> {$/;"	c	inherits:Singleton
ServerApp::m_mainLoop	./common/ServerApp.h	/^    RunLoop m_mainLoop;$/;"	m	class:ServerApp	access:protected
ServerApp::main	./common/ServerApp.cpp	/^int ServerApp::main(int argc, const char *argv[]) {$/;"	f	class:ServerApp	signature:(int argc, const char *argv[])
ServerApp::post	./common/ServerApp.cpp	/^void ServerApp::post(std::function<void ()> fn) {$/;"	f	class:ServerApp	signature:(std::function<void ()> fn)
ServerApp::quit	./common/ServerApp.cpp	/^void ServerApp::quit() {$/;"	f	class:ServerApp	signature:()
ServerApp::update	./common/ServerApp.h	/^    virtual void update(f32 deltaTime) {} \/\/ seconds.$/;"	f	class:ServerApp	access:public	signature:(f32 deltaTime)
ServerApp::~ServerApp	./common/ServerApp.cpp	/^ServerApp::~ServerApp() {$/;"	f	class:ServerApp	signature:()
ServerAppCreator	./common/ServerApp.h	/^struct ServerAppCreator {$/;"	s
ServerAppCreator::create	./common/ServerApp.cpp	/^ServerApp * ServerAppCreator::create() {$/;"	f	class:ServerAppCreator	signature:()
ServerAppCreator::destroy	./common/ServerApp.cpp	/^void ServerAppCreator::destroy(ServerApp *p) {$/;"	f	class:ServerAppCreator	signature:(ServerApp *p)
SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
SetCDATA	./server/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
SetCondenseWhiteSpace	./server/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
SetDocument	./server/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
SetDoubleAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
SetDoubleAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
SetDoubleValue	./server/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
SetError	./server/tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
SetId	./server/MyTest.h	/^  void SetId(int id)$/;"	f	class:Father	access:public	signature:(int id)
SetIndent	./server/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
SetIntValue	./server/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
SetLineBreak	./server/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
SetName	./server/MyTest.h	/^  void SetName(int name)$/;"	f	class:Father	access:public	signature:(int name)
SetName	./server/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
SetName	./server/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
SetStreamPrinting	./server/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
SetTabSize	./server/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
SetUserData	./server/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
SetValue	./server/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
SetValue	./server/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
SetValue	./server/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
SetValue	./server/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
Size	./server/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
SkipWhiteSpace	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
Stamp	./server/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
Standalone	./server/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
State	./server/GameTank.h	/^    enum State {$/;"	g	class:GameTank	access:public
State	./server/Room.h	/^    enum State {$/;"	g	class:Room	access:public
Str	./server/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
StreamTo	./server/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
StreamWhiteSpace	./server/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
StringEqual	./server/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TINYXML_COMMENT	./server/tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DECLARATION	./server/tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DOCUMENT	./server/tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_ELEMENT	./server/tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_INCLUDED	./server/tinyxml.h	27;"	d
TINYXML_TEXT	./server/tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_TYPECOUNT	./server/tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TINYXML_UNKNOWN	./server/tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TIXML_DEFAULT_ENCODING	./server/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	./server/tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	./server/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	./server/tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	./server/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_DOCUMENT_EMPTY	./server/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_DOCUMENT_TOP_ONLY	./server/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_EMBEDDED_NULL	./server/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	./server/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_OPENING_FILE	./server/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_CDATA	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_COMMENT	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_DECLARATION	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_ELEMENT	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_EMPTY	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_PARSING_UNKNOWN	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_READING_ATTRIBUTES	./server/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_READING_ELEMENT_VALUE	./server/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_READING_END_TAG	./server/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon48
TIXML_ERROR_STRING_COUNT	./server/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon48
TIXML_LOG	./server/tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	./server/tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	./server/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	./server/tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v
TIXML_NO_ATTRIBUTE	./server/tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon47
TIXML_NO_ERROR	./server/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon48
TIXML_PATCH_VERSION	./server/tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v
TIXML_SAFE	./server/tinyxml.h	62;"	d
TIXML_SNPRINTF	./server/tinyxml.h	67;"	d
TIXML_SNPRINTF	./server/tinyxml.h	72;"	d
TIXML_SNPRINTF	./server/tinyxml.h	77;"	d
TIXML_SNPRINTF	./server/tinyxml.h	80;"	d
TIXML_SSCANF	./server/tinyxml.h	68;"	d
TIXML_SSCANF	./server/tinyxml.h	73;"	d
TIXML_SSCANF	./server/tinyxml.h	78;"	d
TIXML_SSCANF	./server/tinyxml.h	81;"	d
TIXML_STRING	./server/tinyxml.h	52;"	d
TIXML_STRING	./server/tinyxml.h	55;"	d
TIXML_SUCCESS	./server/tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon47
TIXML_USE_STL	./server/tinyxml.h	46;"	d
TIXML_UTF_LEAD_0	./server/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	./server/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	./server/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	./server/tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon47
TabSize	./server/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
Text	./server/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute	./server/tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlAttribute::DoubleValue	./server/tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::IntValue	./server/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Name	./server/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::NameTStr	./server/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::Next	./server/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Next	./server/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlAttribute::Previous	./server/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	signature:() const
TiXmlAttribute::Previous	./server/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Print	./server/tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlAttribute::Print	./server/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	access:public	signature:( FILE* cfile, int depth ) const
TiXmlAttribute::QueryDoubleValue	./server/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	signature:( double* dval ) const
TiXmlAttribute::QueryIntValue	./server/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	signature:( int* ival ) const
TiXmlAttribute::SetDocument	./server/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute	access:public	signature:( TiXmlDocument* doc )
TiXmlAttribute::SetDoubleValue	./server/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	signature:( double _value )
TiXmlAttribute::SetIntValue	./server/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	signature:( int _value )
TiXmlAttribute::SetName	./server/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _name )
TiXmlAttribute::SetName	./server/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name )
TiXmlAttribute::SetValue	./server/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	access:public	signature:( const char* _value )
TiXmlAttribute::SetValue	./server/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _value )
TiXmlAttribute::TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const char * _name, const char * _value )
TiXmlAttribute::TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute	access:public	signature:( const std::string& _name, const std::string& _value )
TiXmlAttribute::TiXmlAttribute	./server/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute	access:public	signature:()
TiXmlAttribute::Value	./server/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::ValueStr	./server/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
TiXmlAttribute::document	./server/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::name	./server/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::next	./server/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::operator <	./server/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator ==	./server/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::operator >	./server/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
TiXmlAttribute::prev	./server/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttribute::value	./server/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
TiXmlAttributeSet	./server/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet	./server/tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlAttributeSet::Add	./server/tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* addMe )
TiXmlAttributeSet::Find	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const char* name ) const
TiXmlAttributeSet::Find	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& name ) const
TiXmlAttributeSet::FindOrCreate	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet	signature:( const char* _name )
TiXmlAttributeSet::FindOrCreate	./server/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet	signature:( const std::string& _name )
TiXmlAttributeSet::First	./server/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::First	./server/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Last	./server/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:()
TiXmlAttributeSet::Last	./server/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	access:public	signature:() const
TiXmlAttributeSet::Remove	./server/tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	signature:( TiXmlAttribute* removeMe )
TiXmlAttributeSet::TiXmlAttributeSet	./server/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlAttributeSet::sentinel	./server/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
TiXmlAttributeSet::~TiXmlAttributeSet	./server/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
TiXmlBase	./server/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase	./server/tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlBase::Column	./server/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::ConvertUTF32ToUTF8	./server/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	signature:( unsigned long input, char* output, int* length )
TiXmlBase::EncodeString	./server/tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	signature:( const TIXML_STRING& str, TIXML_STRING* outString )
TiXmlBase::Entity	./server/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase	access:private
TiXmlBase::Entity::chr	./server/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::str	./server/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::Entity::strLength	./server/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
TiXmlBase::GetChar	./server/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( const char* p, char* _value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetEntity	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, char* value, int* length, TiXmlEncoding encoding )
TiXmlBase::GetUserData	./server/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::GetUserData	./server/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::IsAlpha	./server/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsAlphaNum	./server/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	signature:( unsigned char anyByte, TiXmlEncoding )
TiXmlBase::IsWhiteSpace	./server/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase	access:protected	signature:( char c )
TiXmlBase::IsWhiteSpace	./server/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	access:protected	signature:( int c )
TiXmlBase::IsWhiteSpaceCondensed	./server/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::MAX_ENTITY_LENGTH	./server/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon49
TiXmlBase::NUM_ENTITY	./server/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon49
TiXmlBase::ReadName	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )
TiXmlBase::ReadText	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase	signature:( const char* p, TIXML_STRING * text, bool trimWhiteSpace, const char* endTag, bool caseInsensitive, TiXmlEncoding encoding )
TiXmlBase::Row	./server/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase	access:public	signature:() const
TiXmlBase::SetCondenseWhiteSpace	./server/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	access:public	signature:( bool condense )
TiXmlBase::SetUserData	./server/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	access:public	signature:( void* user )
TiXmlBase::SkipWhiteSpace	./server/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	signature:( const char* p, TiXmlEncoding encoding )
TiXmlBase::StreamTo	./server/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, int character, TIXML_STRING * tag )
TiXmlBase::StreamWhiteSpace	./server/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlBase::StringEqual	./server/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	signature:( const char* p, const char* tag, bool ignoreCase, TiXmlEncoding encoding )
TiXmlBase::TIXML_ERROR	./server/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_DOCUMENT_EMPTY	./server/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_DOCUMENT_TOP_ONLY	./server/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_EMBEDDED_NULL	./server/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	./server/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_OPENING_FILE	./server/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_CDATA	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_COMMENT	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_DECLARATION	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_ELEMENT	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_EMPTY	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_PARSING_UNKNOWN	./server/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_READING_ATTRIBUTES	./server/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_READING_ELEMENT_VALUE	./server/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_READING_END_TAG	./server/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_ERROR_STRING_COUNT	./server/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TIXML_NO_ERROR	./server/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon48
TiXmlBase::TiXmlBase	./server/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlBase::ToLower	./server/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
TiXmlBase::condenseWhiteSpace	./server/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
TiXmlBase::condenseWhiteSpace	./server/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	./server/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
TiXmlBase::entity	./server/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::errorString	./server/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::errorString	./server/tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
TiXmlBase::location	./server/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::userData	./server/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase	access:protected
TiXmlBase::utf8ByteTable	./server/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
TiXmlBase::utf8ByteTable	./server/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
TiXmlBase::~TiXmlBase	./server/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase	access:public	signature:()
TiXmlComment	./server/tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment	./server/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment	./server/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment	./server/tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlComment::Accept	./server/tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	signature:( TiXmlVisitor* visitor ) const
TiXmlComment::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	signature:() const
TiXmlComment::CopyTo	./server/tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	signature:( TiXmlComment* target ) const
TiXmlComment::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlComment::Print	./server/tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	signature:( FILE* cfile, int depth ) const
TiXmlComment::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlComment::TiXmlComment	./server/tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& copy )
TiXmlComment::TiXmlComment	./server/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment	access:public	signature:( const char* _value )
TiXmlComment::TiXmlComment	./server/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	./server/tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlComment::ToComment	./server/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
TiXmlComment::operator =	./server/tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
TiXmlComment::~TiXmlComment	./server/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment	access:public	signature:()
TiXmlCursor	./server/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor	./server/tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlCursor::Clear	./server/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::TiXmlCursor	./server/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor	access:public	signature:()
TiXmlCursor::col	./server/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlCursor::row	./server/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration	./server/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration	./server/tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDeclaration::Accept	./server/tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlVisitor* visitor ) const
TiXmlDeclaration::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	signature:() const
TiXmlDeclaration::CopyTo	./server/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	signature:( TiXmlDeclaration* target ) const
TiXmlDeclaration::Encoding	./server/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )
TiXmlDeclaration::Print	./server/tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	signature:( FILE* cfile, int , TIXML_STRING* str ) const
TiXmlDeclaration::Print	./server/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	access:public	signature:( FILE* cfile, int depth ) const
TiXmlDeclaration::Standalone	./server/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDeclaration::TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration	signature:( const std::string& _version, const std::string& _encoding, const std::string& _standalone )
TiXmlDeclaration::TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::TiXmlDeclaration	./server/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration	signature:( const char * _version, const char * _encoding, const char * _standalone )
TiXmlDeclaration::TiXmlDeclaration	./server/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	./server/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDeclaration::ToDeclaration	./server/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::Version	./server/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
TiXmlDeclaration::encoding	./server/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::operator =	./server/tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
TiXmlDeclaration::standalone	./server/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::version	./server/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
TiXmlDeclaration::~TiXmlDeclaration	./server/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument	./server/tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlDocument::Accept	./server/tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlVisitor* visitor ) const
TiXmlDocument::ClearError	./server/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::CopyTo	./server/tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	signature:( TiXmlDocument* target ) const
TiXmlDocument::Error	./server/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorCol	./server/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorDesc	./server/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorId	./server/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::ErrorRow	./server/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( FILE* file, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./server/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* _filename, TiXmlEncoding encoding )
TiXmlDocument::LoadFile	./server/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )
TiXmlDocument::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )
TiXmlDocument::Print	./server/tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	signature:( FILE* cfile, int depth ) const
TiXmlDocument::Print	./server/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::RootElement	./server/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::RootElement	./server/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	signature:( FILE* fp ) const
TiXmlDocument::SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	signature:( const char * filename ) const
TiXmlDocument::SaveFile	./server/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	signature:() const
TiXmlDocument::SaveFile	./server/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	access:public	signature:( const std::string& filename ) const
TiXmlDocument::SetError	./server/tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	signature:( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlDocument::SetTabSize	./server/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:( int _tabsize )
TiXmlDocument::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlDocument::TabSize	./server/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const char * documentName )
TiXmlDocument::TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:( const std::string& documentName )
TiXmlDocument::TiXmlDocument	./server/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument	signature:()
TiXmlDocument::ToDocument	./server/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlDocument::ToDocument	./server/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
TiXmlDocument::error	./server/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorDesc	./server/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorId	./server/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::errorLocation	./server/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::operator =	./server/tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
TiXmlDocument::tabsize	./server/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::useMicrosoftBOM	./server/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
TiXmlDocument::~TiXmlDocument	./server/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement	./server/tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlElement::Accept	./server/tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	signature:( TiXmlVisitor* visitor ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	signature:( const char* name ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* d ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* i ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* d ) const
TiXmlElement::Attribute	./server/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* i ) const
TiXmlElement::ClearThis	./server/tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	signature:()
TiXmlElement::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::CopyTo	./server/tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	signature:( TiXmlElement* target ) const
TiXmlElement::FirstAttribute	./server/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::FirstAttribute	./server/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::GetText	./server/tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	signature:() const
TiXmlElement::LastAttribute	./server/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::LastAttribute	./server/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::Print	./server/tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	signature:( FILE* cfile, int depth ) const
TiXmlElement::QueryBoolAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, bool* bval ) const
TiXmlElement::QueryDoubleAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const char* name, double* dval ) const
TiXmlElement::QueryDoubleAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, double* dval ) const
TiXmlElement::QueryFloatAttribute	./server/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, float* _value ) const
TiXmlElement::QueryIntAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const char* name, int* ival ) const
TiXmlElement::QueryIntAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	signature:( const std::string& name, int* ival ) const
TiXmlElement::QueryStringAttribute	./server/tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement	access:public	signature:( const char* name, std::string* _value ) const
TiXmlElement::QueryUnsignedAttribute	./server/tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement	signature:( const char* name, unsigned* value ) const
TiXmlElement::QueryValueAttribute	./server/tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, std::string* outValue ) const
TiXmlElement::QueryValueAttribute	./server/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name, T* outValue ) const
TiXmlElement::ReadValue	./server/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlElement::RemoveAttribute	./server/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	signature:( const char * name )
TiXmlElement::RemoveAttribute	./server/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement	access:public	signature:( const std::string& name )
TiXmlElement::SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	signature:( const char * cname, const char * cvalue )
TiXmlElement::SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	signature:( const char * name, int val )
TiXmlElement::SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement	signature:( const std::string& _name, const std::string& _value )
TiXmlElement::SetAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, int val )
TiXmlElement::SetDoubleAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	signature:( const char * name, double val )
TiXmlElement::SetDoubleAttribute	./server/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement	signature:( const std::string& name, double val )
TiXmlElement::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	signature:(std::istream * in, TIXML_STRING * tag)
TiXmlElement::TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement	signature:(const char * _value)
TiXmlElement::TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& copy)
TiXmlElement::TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement	signature:( const std::string& _value )
TiXmlElement::ToElement	./server/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
TiXmlElement::ToElement	./server/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
TiXmlElement::attributeSet	./server/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
TiXmlElement::operator =	./server/tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
TiXmlElement::~TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
TiXmlEncoding	./server/tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	./server/tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f	signature:( const char* filename, const char* mode )
TiXmlHandle	./server/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle	./server/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle	./server/tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlHandle::Child	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::Child	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::Child	./server/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::ChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	signature:( const char* value, int count ) const
TiXmlHandle::ChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	signature:( int count ) const
TiXmlHandle::ChildElement	./server/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value, int index ) const
TiXmlHandle::Element	./server/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::FirstChild	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChild	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChild	./server/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::FirstChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	signature:( const char * value ) const
TiXmlHandle::FirstChildElement	./server/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	signature:() const
TiXmlHandle::FirstChildElement	./server/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle	access:public	signature:( const std::string& _value ) const
TiXmlHandle::Node	./server/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Text	./server/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::TiXmlHandle	./server/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle	access:public	signature:( TiXmlNode* _node )
TiXmlHandle::TiXmlHandle	./server/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlHandle::ToElement	./server/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToNode	./server/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToText	./server/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::ToUnknown	./server/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::Unknown	./server/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
TiXmlHandle::node	./server/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
TiXmlHandle::operator =	./server/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
TiXmlNode	./server/tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode	./server/tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c	inherits:TiXmlBase
TiXmlNode::Clear	./server/tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	signature:()
TiXmlNode::CopyTo	./server/tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	signature:( TiXmlNode* target ) const
TiXmlNode::FirstChild	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChild	./server/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChild	./server/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::FirstChild	./server/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::FirstChildElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::FirstChildElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::FirstChildElement	./server/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::FirstChildElement	./server/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::GetDocument	./server/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::GetDocument	./server/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::Identify	./server/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	signature:( const char* p, TiXmlEncoding encoding )
TiXmlNode::InsertAfterChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* afterThis, const TiXmlNode& addThis )
TiXmlNode::InsertBeforeChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* beforeThis, const TiXmlNode& addThis )
TiXmlNode::InsertEndChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	signature:( const TiXmlNode& addThis )
TiXmlNode::IterateChildren	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	signature:( const char * val, const TiXmlNode* previous ) const
TiXmlNode::IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const TiXmlNode* previous )
TiXmlNode::IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	./server/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous )
TiXmlNode::IterateChildren	./server/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value, const TiXmlNode* previous ) const
TiXmlNode::LastChild	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char * _value )
TiXmlNode::LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::LastChild	./server/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::LastChild	./server/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::LastChild	./server/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::LinkEndChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* node )
TiXmlNode::NextSibling	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char* _next )
TiXmlNode::NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSibling	./server/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSibling	./server/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NextSibling	./server/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NextSiblingElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::NextSiblingElement	./server/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	signature:() const
TiXmlNode::NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_next )
TiXmlNode::NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value)
TiXmlNode::NextSiblingElement	./server/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::NextSiblingElement	./server/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value) const
TiXmlNode::NoChildren	./server/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::NodeType	./server/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode	access:public
TiXmlNode::Parent	./server/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::Parent	./server/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::PreviousSibling	./server/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	signature:( const char * _value ) const
TiXmlNode::PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	access:public	signature:( const char *_prev )
TiXmlNode::PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::PreviousSibling	./server/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::PreviousSibling	./server/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value ) const
TiXmlNode::PreviousSibling	./server/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::RemoveChild	./server/tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* removeThis )
TiXmlNode::ReplaceChild	./server/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	signature:( TiXmlNode* replaceThis, const TiXmlNode& withThis )
TiXmlNode::SetValue	./server/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode	access:public	signature:( const std::string& _value )
TiXmlNode::SetValue	./server/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	access:public	signature:(const char * _value)
TiXmlNode::TINYXML_COMMENT	./server/tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_DECLARATION	./server/tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_DOCUMENT	./server/tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_ELEMENT	./server/tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_TEXT	./server/tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_TYPECOUNT	./server/tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TINYXML_UNKNOWN	./server/tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TiXmlNode::TiXmlNode	./server/tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode	signature:( NodeType _type )
TiXmlNode::ToComment	./server/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToComment	./server/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDeclaration	./server/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDeclaration	./server/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToDocument	./server/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToDocument	./server/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToElement	./server/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToElement	./server/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToText	./server/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToText	./server/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ToUnknown	./server/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
TiXmlNode::ToUnknown	./server/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Type	./server/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::Value	./server/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueStr	./server/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::ValueTStr	./server/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
TiXmlNode::firstChild	./server/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::lastChild	./server/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::next	./server/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::parent	./server/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::prev	./server/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::type	./server/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::value	./server/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode	access:protected
TiXmlNode::~TiXmlNode	./server/tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
TiXmlParsingData	./server/tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData	./server/tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlParsingData::Cursor	./server/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData	access:public	signature:() const
TiXmlParsingData::Stamp	./server/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	signature:( const char* now, TiXmlEncoding encoding )
TiXmlParsingData::TiXmlParsingData	./server/tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:	access:private	signature:( const char* start, int _tabsize, int row, int col )
TiXmlParsingData::cursor	./server/tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::stamp	./server/tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlParsingData::tabsize	./server/tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
TiXmlPrinter	./server/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter	./server/tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c	inherits:TiXmlVisitor
TiXmlPrinter::CStr	./server/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::DoIndent	./server/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::DoLineBreak	./server/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter	access:private	signature:()
TiXmlPrinter::Indent	./server/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::LineBreak	./server/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::SetIndent	./server/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _indent )
TiXmlPrinter::SetLineBreak	./server/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	access:public	signature:( const char* _lineBreak )
TiXmlPrinter::SetStreamPrinting	./server/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Size	./server/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Str	./server/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::TiXmlPrinter	./server/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter	access:public	signature:()
TiXmlPrinter::Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
TiXmlPrinter::Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
TiXmlPrinter::Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
TiXmlPrinter::Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
TiXmlPrinter::VisitEnter	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitEnter	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
TiXmlPrinter::VisitExit	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
TiXmlPrinter::VisitExit	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
TiXmlPrinter::buffer	./server/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::depth	./server/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::indent	./server/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::lineBreak	./server/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
TiXmlPrinter::simpleTextPrint	./server/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
TiXmlText	./server/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText	./server/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText	./server/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText	./server/tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlText::Accept	./server/tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	signature:( TiXmlVisitor* visitor ) const
TiXmlText::Blank	./server/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::CDATA	./server/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	signature:() const
TiXmlText::CopyTo	./server/tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	signature:( TiXmlText* target ) const
TiXmlText::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlText::Print	./server/tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	signature:( FILE* cfile, int depth ) const
TiXmlText::SetCDATA	./server/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText	access:public	signature:( bool _cdata )
TiXmlText::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlText::TiXmlText	./server/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:(const char * initValue )
TiXmlText::TiXmlText	./server/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& copy )
TiXmlText::TiXmlText	./server/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText	access:public	signature:( const std::string& initValue )
TiXmlText::ToText	./server/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlText::ToText	./server/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
TiXmlText::cdata	./server/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
TiXmlText::operator =	./server/tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
TiXmlText::~TiXmlText	./server/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
TiXmlUnknown	./server/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown	./server/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown	./server/tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c	inherits:TiXmlNode
TiXmlUnknown::Accept	./server/tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlVisitor* visitor ) const
TiXmlUnknown::Clone	./server/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	signature:() const
TiXmlUnknown::CopyTo	./server/tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	signature:( TiXmlUnknown* target ) const
TiXmlUnknown::Parse	./server/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	signature:( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )
TiXmlUnknown::Print	./server/tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	signature:( FILE* cfile, int depth ) const
TiXmlUnknown::StreamIn	./server/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	signature:( std::istream * in, TIXML_STRING * tag )
TiXmlUnknown::TiXmlUnknown	./server/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::TiXmlUnknown	./server/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	./server/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlUnknown::ToUnknown	./server/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
TiXmlUnknown::operator =	./server/tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
TiXmlUnknown::~TiXmlUnknown	./server/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
TiXmlVisitor	./server/tinyxml.h	/^class TiXmlVisitor$/;"	c
TiXmlVisitor::Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
TiXmlVisitor::Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
TiXmlVisitor::Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
TiXmlVisitor::Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
TiXmlVisitor::VisitEnter	./server/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitEnter	./server/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
TiXmlVisitor::VisitExit	./server/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
TiXmlVisitor::VisitExit	./server/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
TiXmlVisitor::~TiXmlVisitor	./server/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
ToComment	./server/tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:()
ToComment	./server/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToComment	./server/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToComment	./server/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment	access:public	signature:() const
ToDeclaration	./server/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:()
ToDeclaration	./server/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDeclaration	./server/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDeclaration	./server/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
ToDocument	./server/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:()
ToDocument	./server/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToDocument	./server/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToDocument	./server/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument	access:public	signature:() const
ToElement	./server/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToElement	./server/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:()
ToElement	./server/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToElement	./server/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToElement	./server/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement	access:public	signature:() const
ToLower	./server/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	access:protected	signature:( int v, TiXmlEncoding encoding )
ToNode	./server/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle	access:public	signature:() const
ToText	./server/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToText	./server/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToText	./server/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:()
ToText	./server/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
ToText	./server/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText	access:public	signature:() const
ToUnknown	./server/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
ToUnknown	./server/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:()
ToUnknown	./server/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:()
ToUnknown	./server/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown	access:public	signature:() const
ToUnknown	./server/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode	access:public	signature:() const
Type	./server/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Unknown	./server/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle	access:public	signature:() const
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_backGame) {$/;"	f	signature:(PublicLink, pkt, req_backGame)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_createDemoRoom) {$/;"	f	signature:(PublicLink, pkt, req_createDemoRoom)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_endDemoGame) {$/;"	f	signature:(PublicLink, pkt, req_endDemoGame)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_enterRoom) {$/;"	f	signature:(PublicLink, pkt, req_enterRoom)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_exitRoom) {$/;"	f	signature:(PublicLink, pkt, req_exitRoom)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_getPlayerBaseInfo) {$/;"	f	signature:(PublicLink, pkt, req_getPlayerBaseInfo)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_login) {$/;"	f	signature:(PublicLink, pkt, req_login)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_setPlayerName) {$/;"	f	signature:(PublicLink, pkt, req_setPlayerName)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_startGame) {$/;"	f	signature:(PublicLink, pkt, req_startGame)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_tankCommonAttack) {$/;"	f	signature:(PublicLink, pkt, req_tankCommonAttack)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_tankMove) {$/;"	f	signature:(PublicLink, pkt, req_tankMove)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_tankPowerAttack) {$/;"	f	signature:(PublicLink, pkt, req_tankPowerAttack)
VN_IMPL_PACKET_REQUEST2	./server/PublicLink.cpp	/^VN_IMPL_PACKET_REQUEST2(PublicLink, pkt, req_tankStop) {$/;"	f	signature:(PublicLink, pkt, req_tankStop)
Value	./server/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	access:public	signature:() const
Value	./server/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueStr	./server/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute	access:public	signature:() const
ValueStr	./server/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
ValueTStr	./server/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	access:public	signature:() const
Version	./server/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration	access:public	signature:() const
Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlComment& comment )
Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDeclaration& declaration )
Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlText& text )
Visit	./server/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlUnknown& unknown )
Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlComment& )
Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDeclaration& )
Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlText& )
Visit	./server/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlUnknown& )
VisitEnter	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitEnter	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )
VisitEnter	./server/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitEnter	./server/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& , const TiXmlAttribute* )
VisitExit	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlDocument& )
VisitExit	./server/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	signature:( const TiXmlElement& element )
VisitExit	./server/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlDocument& )
VisitExit	./server/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor	access:public	signature:( const TiXmlElement& )
_CGrass_H_	./server/CGrass.h	2;"	d
_CMoney_H_	./server/CMoney.h	2;"	d
_CPropertyFactory_H_	./server/CPropertyFactory.h	2;"	d
_CProperty_H_	./server/CProperty.h	2;"	d
_CProtectMask_H_	./server/CProtectMask.h	2;"	d
_CRiver_H_	./server/CRiver.h	2;"	d
_CSpeedUpProperty_H_	./server/CSpeedUpProperty.h	2;"	d
_CWall_H_	./server/CWall.h	2;"	d
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_enterRoom	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_login	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_setPlayerName	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideBullet	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideEntity	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideMask	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideTank	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletOutOfMap	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletdestoryObject	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_createProperty	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_destoryObject	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_enterRoomOk	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_gameBack	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_getProperty	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_playerBaseInfo	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_playerExitRoom	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankCommonAttack	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankMove	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankPowerAttack	access:public
_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankStop	access:public
_MYTEST_H	./server/MyTest.h	2;"	d
_Move	./server/GameDynamicEntity.cpp	/^void GameDynamicEntity::_Move(const vector2f &newPos)$/;"	f	class:GameDynamicEntity	signature:(const vector2f &newPos)
_STDAFX_H	./server/stdafx.h	2;"	d
__CGameHelper__	./server/CGameHelper.h	2;"	d
__GameObjectManager__	./server/GameObjectManager.h	2;"	d
__demo_svr__AsyncObject__	./server/AsyncObject.h	10;"	d
__demo_svr__DBManager__	./server/DBManager.h	10;"	d
__demo_svr__DemoServer__	./server/DemoServer.h	10;"	d
__demo_svr__GameBullet__	./server/GameBullet.h	10;"	d
__demo_svr__GameCommon__	./server/GameCommon.h	10;"	d
__demo_svr__GameDynamicEntity__	./server/GameDynamicEntity.h	10;"	d
__demo_svr__GameEntity__	./server/GameEntity.h	10;"	d
__demo_svr__GameObject__	./server/GameObject.h	10;"	d
__demo_svr__GamePlayer__	./server/GamePlayer.h	10;"	d
__demo_svr__GameStaticEntity__	./server/GameStaticEntity.h	10;"	d
__demo_svr__GameTank__	./server/GameTank.h	10;"	d
__demo_svr__Game__	./server/Game.h	10;"	d
__demo_svr__LinkManager__	./server/LinkManager.h	10;"	d
__demo_svr__PlayerManager__	./server/PlayerManager.h	10;"	d
__demo_svr__Player__	./server/Player.h	10;"	d
__demo_svr__PublicLink__	./server/PublicLink.h	10;"	d
__demo_svr__PublicListen__	./server/PublicListen.h	10;"	d
__demo_svr__RoomManager__	./server/RoomManager.h	10;"	d
__demo_svr__Room__	./server/Room.h	10;"	d
__passport_svr__LogPrinter__	./common/LogPrinter.h	10;"	d
__passport_svr__ServerApp__	./common/ServerApp.h	10;"	d
_accepted	./server/PublicListen.cpp	/^Link_TCP_Connection * PublicListen::_accepted(const NetAddress &peer) {$/;"	f	class:PublicListen	signature:(const NetAddress &peer)
_addObject	./server/Game.cpp	/^bool Game::_addObject(GameObjectPtr object) $/;"	f	class:Game	signature:(GameObjectPtr object)
_console_input	./server/DemoServer.cpp	/^void DemoServer::_console_input(str8 cmd) {$/;"	f	class:DemoServer	signature:(str8 cmd)
_console_recv	./server/PublicLink.cpp	/^void PublicLink::_console_recv(LinkBufferPtr buffers) {$/;"	f	class:PublicLink	signature:(LinkBufferPtr buffers)
_console_send	./server/PublicLink.cpp	/^void PublicLink::_console_send(const Packet &pkt, SentAction sa) {$/;"	f	class:PublicLink	signature:(const Packet &pkt, SentAction sa)
_destroy	./server/PublicLink.cpp	/^void PublicLink::_destroy() $/;"	f	class:PublicLink	signature:()
_destroy	./server/PublicListen.cpp	/^void PublicListen::_destroy() {$/;"	f	class:PublicListen	signature:()
_destroy	./server/Room.cpp	/^void Room::_destroy() {$/;"	f	class:Room	signature:()
_disconnected	./server/PublicLink.cpp	/^void PublicLink::_disconnected() {$/;"	f	class:PublicLink	signature:()
_endDemoGame	./server/Room.cpp	/^void Room::_endDemoGame() $/;"	f	class:Room	signature:()
_enter	./server/Room.cpp	/^void Room::_enter(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
_game_broadcast	./server/Room.cpp	/^void Room::_game_broadcast(const std::vector<PacketPtr> &packets) {$/;"	f	class:Room	signature:(const std::vector<PacketPtr> &packets)
_init	./server/PublicLink.cpp	/^void PublicLink::_init() $/;"	f	class:PublicLink	signature:()
_init	./server/PublicListen.cpp	/^void PublicListen::_init() {$/;"	f	class:PublicListen	signature:()
_init_link_pool	./server/DemoServer.cpp	/^bool DemoServer::_init_link_pool() {$/;"	f	class:DemoServer	signature:()
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_enterRoom::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_login::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_setPlayerName::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideBullet::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideEntity::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideMask::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideTank::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletOutOfMap::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletdestoryObject::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_createProperty::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_destoryObject::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_enterRoomOk::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_gameBack::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_getProperty::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_playerBaseInfo::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_playerExitRoom::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankCommonAttack::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankMove::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankPowerAttack::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankStop::_Data	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CGrass	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CProperty	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CProtectMask	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CRiver	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:CWall	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:Game	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GameBullet	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GamePlayer	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:GameTank	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:PlayerRank	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:Rank	access:public	signature:(Variable_object &_vobj)
_load	./autocode/demo.hpp	/^    void _load(Variable_object &_vobj) {$/;"	f	struct:RoomSeatInfo	access:public	signature:(Variable_object &_vobj)
_load_config	./server/DemoServer.cpp	/^bool DemoServer::_load_config() {$/;"	f	class:DemoServer	signature:()
_my_exit	./common/ServerApp.cpp	/^void _my_exit(int) {$/;"	f	signature:(int)
_received	./server/PublicLink.cpp	/^void PublicLink::_received(LinkBufferPtr buffers) {$/;"	f	class:PublicLink	signature:(LinkBufferPtr buffers)
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_enterRoom::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_login::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_setPlayerName::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideBullet::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideEntity::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideMask::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideTank::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletOutOfMap::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletdestoryObject::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_createProperty::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_destoryObject::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_enterRoomOk::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_gameBack::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_getProperty::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_playerBaseInfo::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_playerExitRoom::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankCommonAttack::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankMove::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankPowerAttack::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankStop::_Data	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CGrass	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CProperty	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CProtectMask	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CRiver	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:CWall	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:Game	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GameBullet	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GamePlayer	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:GameTank	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:PlayerRank	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:Rank	access:public	signature:(Variable_object &_vobj) const
_save	./autocode/demo.hpp	/^    void _save(Variable_object &_vobj) const {$/;"	f	struct:RoomSeatInfo	access:public	signature:(Variable_object &_vobj) const
_sent	./server/PublicLink.cpp	/^void PublicLink::_sent(size_t bytes, void *tag) {$/;"	f	class:PublicLink	signature:(size_t bytes, void *tag)
_setDirection	./server/GameTank.cpp	/^void GameTank::_setDirection(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
_snapshot	./server/GameTank.cpp	/^void GameTank::_snapshot(pkt::GameTank &tank) {$/;"	f	class:GameTank	signature:(pkt::GameTank &tank)
_sql	./server/DBManager.cpp	/^    const c8 *_sql;$/;"	v
_types	./server/DBManager.cpp	/^    std::initializer_list<MySQL_DataType> _types;$/;"	v
_update	./server/Game.cpp	/^void Game::_update(f32 deltaTime) {$/;"	f	class:Game	signature:(f32 deltaTime)
_update	./server/Room.cpp	/^void Room::_update(f32 deltaTime) {$/;"	f	class:Room	signature:(f32 deltaTime)
_update	./server/RoomManager.cpp	/^void RoomManager::_update(f32 deltaTime) {$/;"	f	class:RoomManager	signature:(f32 deltaTime)
_updateMovement	./server/GameDynamicEntity.cpp	/^bool GameDynamicEntity::_updateMovement(f32 deltaTime) {$/;"	f	class:GameDynamicEntity	signature:(f32 deltaTime)
add	./server/LinkManager.cpp	/^void LinkManager::add(Link_TCP_Connection *link) {$/;"	f	class:LinkManager	signature:(Link_TCP_Connection *link)
addScore	./server/GamePlayer.h	/^	void addScore(unsigned int _score)$/;"	f	class:GamePlayer	access:public	signature:(unsigned int _score)
any_check	./server/Game.cpp	/^bool Game::any_check(const vector2i &_pos, const vector2i &_radius) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius) const
async	./server/AsyncObject.h	/^    void async(AsyncObjectPtr obj, std::function<void()> fn) {$/;"	f	class:AsyncObject	access:public	signature:(AsyncObjectPtr obj, std::function<void()> fn)
async	./server/Player.cpp	/^void Player::async(std::function<void()>  fn) {$/;"	f	class:Player	signature:(std::function<void()> fn)
async	./server/PublicLink.cpp	/^void PublicLink::async(std::function<void()> fn) {$/;"	f	class:PublicLink	signature:(std::function<void()> fn)
async	./server/Room.cpp	/^void Room::async(std::function<void()> fn) {$/;"	f	class:Room	signature:(std::function<void()> fn)
async_backGame	./server/Player.cpp	/^void Player::async_backGame() {$/;"	f	class:Player	signature:()
async_backGame	./server/Room.cpp	/^void Room::async_backGame(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
async_createDemoRoom	./server/Player.cpp	/^void Player::async_createDemoRoom() {$/;"	f	class:Player	signature:()
async_disconnected	./server/Player.cpp	/^void Player::async_disconnected() {$/;"	f	class:Player	signature:()
async_disconnected	./server/Room.cpp	/^void Room::async_disconnected(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
async_endDemoGame	./server/Room.cpp	/^void Room::async_endDemoGame() {$/;"	f	class:Room	signature:()
async_enterRoom	./server/Player.cpp	/^void Player::async_enterRoom(str8 roomName) {$/;"	f	class:Player	signature:(str8 roomName)
async_exit	./server/Room.cpp	/^void Room::async_exit(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
async_fireCommonAttack	./server/Room.cpp	/^void Room::async_fireCommonAttack(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
async_firePowerAttack	./server/Room.cpp	/^void Room::async_firePowerAttack(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
async_initDemo	./server/Room.cpp	/^void Room::async_initDemo(PlayerPtr owner, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr owner, PublicLinkPtr link)
async_login	./server/Player.cpp	/^void Player::async_login(RefCountedPtr<PublicLink> link) {$/;"	f	class:Player	signature:(RefCountedPtr<PublicLink> link)
async_loginNew	./server/Player.cpp	/^void Player::async_loginNew(RefCountedPtr<PublicLink> link) {$/;"	f	class:Player	signature:(RefCountedPtr<PublicLink> link)
async_moveTank	./server/Room.cpp	/^void Room::async_moveTank(size_t seat, u32 direction) {$/;"	f	class:Room	signature:(size_t seat, u32 direction)
async_notify_destroyRoom	./server/Player.cpp	/^void Player::async_notify_destroyRoom() {$/;"	f	class:Player	signature:()
async_notify_destroyRoomNoMsg	./server/Player.cpp	/^void Player::async_notify_destroyRoomNoMsg() {$/;"	f	class:Player	signature:()
async_notify_enterRoom	./server/Player.cpp	/^void Player::async_notify_enterRoom(RefCountedPtr<Room> room) {$/;"	f	class:Player	signature:(RefCountedPtr<Room> room)
async_notify_exitRoom	./server/Player.cpp	/^void Player::async_notify_exitRoom() {$/;"	f	class:Player	signature:()
async_notify_reloginRoom	./server/Player.cpp	/^void Player::async_notify_reloginRoom(bool ok) {$/;"	f	class:Player	signature:(bool ok)
async_relogin	./server/Room.cpp	/^void Room::async_relogin(PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:Room	signature:(PlayerPtr player, PublicLinkPtr link)
async_sendPlayerBaseInfo	./server/Player.cpp	/^void Player::async_sendPlayerBaseInfo() {$/;"	f	class:Player	signature:()
async_setName	./server/Player.cpp	/^void Player::async_setName(str8 name) {$/;"	f	class:Player	signature:(str8 name)
async_startGame	./server/Room.cpp	/^void Room::async_startGame() $/;"	f	class:Room	signature:()
async_stopTank	./server/Room.cpp	/^void Room::async_stopTank(size_t seat) {$/;"	f	class:Room	signature:(size_t seat)
attributeSet	./server/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	access:private
broadcastPackets	./server/Game.h	/^    std::vector<PacketPtr> & broadcastPackets() { return m_broadcastPackets; }$/;"	f	class:Game	access:public	signature:()
broadcastPeriod	./server/Game.h	/^	f32 broadcastPeriod() const { return 0.25f; }$/;"	f	class:Game	access:public	signature:() const
buffer	./server/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	access:private
bullet	./server/Game.h	/^        GameBullet *bullet = nullptr;$/;"	m	struct:Game::Cell	access:public
bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletdestoryObject::_Data	access:public
bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
bulletPosX	./autocode/demo.hpp	/^        f32 bulletPosX;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
bulletPosX	./autocode/demo.hpp	/^        f32 bulletPosX;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
bulletPosY	./autocode/demo.hpp	/^        f32 bulletPosY;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
bulletPosY	./autocode/demo.hpp	/^        f32 bulletPosY;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
bullets	./autocode/demo.hpp	/^    std::vector<GameBullet> bullets;$/;"	m	struct:Game	access:public
canMove	./server/GameDynamicEntity.cpp	/^bool GameDynamicEntity::canMove(const vector2f &newPos)$/;"	f	class:GameDynamicEntity	signature:(const vector2f &newPos)
canMove	./server/GameTank.cpp	/^bool GameTank::canMove(const vector2f &newPos)$/;"	f	class:GameTank	signature:(const vector2f &newPos)
cdata	./server/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	access:private
cell	./server/Game.cpp	/^Game::Cell * Game::cell(const vector2i &_pos) {$/;"	f	class:Game	signature:(const vector2i &_pos)
cell_check	./server/Game.cpp	/^bool Game::cell_check(const vector2i &_pos, const vector2i &_radius, GameEntity *except) const $/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameEntity *except) const
cell_getBullet	./server/Game.cpp	/^GameBullet * Game::cell_getBullet(const vector2i &_pos, const vector2i &_radius, GameBullet *except) const {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameBullet *except) const
cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, CProperty  *pProperty)$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, CProperty *pProperty)
cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, CProtectMask *mask) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, CProtectMask *mask)
cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, GameBullet *bullet) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameBullet *bullet)
cell_set	./server/Game.cpp	/^void Game::cell_set(const vector2i &_pos, const vector2i &_radius, GameEntity *entity) {$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, GameEntity *entity)
chr	./server/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity	access:public
closeAll	./server/LinkManager.cpp	/^void LinkManager::closeAll() {$/;"	f	class:LinkManager	signature:()
col	./server/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
condenseWhiteSpace	./server/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
condenseWhiteSpace	./server/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	access:private
create	./common/ServerApp.cpp	/^ServerApp * ServerAppCreator::create() {$/;"	f	class:ServerAppCreator	signature:()
create	./server/CMoney.cpp	/^CProperty*  CMoney::create(Game *pGame)$/;"	f	class:CMoney	signature:(Game *pGame)
create	./server/RoomManager.cpp	/^RoomPtr RoomManager::create(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
createBullet	./server/Game.cpp	/^u32 Game::createBullet(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir,u32 _power)$/;"	f	class:Game	signature:(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _speed, game::Direction _dir,u32 _power)
createGameObjectToMap	./server/GameObjectManager.cpp	/^void GameObjectManager::createGameObjectToMap(TiXmlElement* root, Game *pGame)$/;"	f	class:GameObjectManager	signature:(TiXmlElement* root, Game *pGame)
createPlayer	./server/Game.cpp	/^GamePlayerPtr Game::createPlayer(const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)$/;"	f	class:Game	signature:(const vector2f &_pos, game::Direction _dir, f32 _speed, size_t _playerSeat, u32 _hp)
createProtectMask	./server/Game.cpp	/^void Game::createProtectMask(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32  _survivalTime)$/;"	f	class:Game	signature:(u32 ownerId, const vector2f &_pos, const vector2i &_radius, f32 _survivalTime)
createWall	./server/Game.cpp	/^void Game::createWall(const vector2f &_pos, const vector2i & _radius, u32 _hp)$/;"	f	class:Game	signature:(const vector2f &_pos, const vector2i & _radius, u32 _hp)
cursor	./server/tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:	access:private
data	./autocode/demo.hpp	/^    Game data;$/;"	m	class:res_gameStart	access:public
data	./autocode/demo.hpp	/^    Rank data;$/;"	m	class:res_gameEnd	access:public
data	./autocode/demo.hpp	/^    RoomSeatInfo data;$/;"	m	class:res_playerEnterRoom	access:public
data	./autocode/demo.hpp	/^    f32 data;$/;"	m	class:res_gameTimeStamp	access:public
data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankCommonAttack	access:public
data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankMove	access:public
data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankPowerAttack	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_enterRoom	typeref:struct:req_enterRoom::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_login	typeref:struct:req_login::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_setPlayerName	typeref:struct:req_setPlayerName::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideBullet	typeref:struct:res_bulletCollideBullet::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideEntity	typeref:struct:res_bulletCollideEntity::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideMask	typeref:struct:res_bulletCollideMask::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideTank	typeref:struct:res_bulletCollideTank::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletOutOfMap	typeref:struct:res_bulletOutOfMap::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletdestoryObject	typeref:struct:res_bulletdestoryObject::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_createProperty	typeref:struct:res_createProperty::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_destoryObject	typeref:struct:res_destoryObject::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_enterRoomOk	typeref:struct:res_enterRoomOk::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_gameBack	typeref:struct:res_gameBack::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_getProperty	typeref:struct:res_getProperty::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_playerBaseInfo	typeref:struct:res_playerBaseInfo::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_playerExitRoom	typeref:struct:res_playerExitRoom::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankCommonAttack	typeref:struct:res_tankCommonAttack::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankMove	typeref:struct:res_tankMove::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankPowerAttack	typeref:struct:res_tankPowerAttack::_Data	access:public
data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankStop	typeref:struct:res_tankStop::_Data	access:public
depth	./server/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter	access:private
destroy	./common/ServerApp.cpp	/^void ServerAppCreator::destroy(ServerApp *p) {$/;"	f	class:ServerAppCreator	signature:(ServerApp *p)
destroy	./server/RoomManager.cpp	/^void RoomManager::destroy(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
destroyAll	./server/RoomManager.cpp	/^void RoomManager::destroyAll() {$/;"	f	class:RoomManager	signature:()
direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankMove::_Data	access:public
direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
direction	./autocode/demo.hpp	/^    unsigned int direction;$/;"	m	struct:GameBullet	access:public
direction	./autocode/demo.hpp	/^    unsigned int direction;$/;"	m	struct:GameTank	access:public
direction	./server/GameTank.h	/^    game::Direction direction() const { return m_direction; }$/;"	f	class:GameTank	access:public	signature:() const
document	./server/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	access:private
encoding	./server/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	access:private
enter	./server/RoomManager.cpp	/^void RoomManager::enter(RoomPtr room, PlayerPtr player, PublicLinkPtr link) {$/;"	f	class:RoomManager	signature:(RoomPtr room, PlayerPtr player, PublicLinkPtr link)
entity	./server/Game.h	/^        GameEntity *entity = nullptr;$/;"	m	struct:Game::Cell	access:public
entity	./server/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	access:private
entity	./server/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
entityId	./autocode/demo.hpp	/^        unsigned int entityId;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
error	./server/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument	access:private
errorDesc	./server/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	access:private
errorId	./server/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument	access:private
errorLocation	./server/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	access:private
errorString	./server/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	access:protected
errorString	./server/tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
finalize	./server/DemoServer.cpp	/^void DemoServer::finalize() {$/;"	f	class:DemoServer	signature:()
find	./server/RoomManager.cpp	/^RoomPtr RoomManager::find(const str8 &name) {$/;"	f	class:RoomManager	signature:(const str8 &name)
findObject	./server/Game.cpp	/^GameObjectPtr Game::findObject(u32 objectId) $/;"	f	class:Game	signature:(u32 objectId)
fini	./server/CGrass.cpp	/^void  CGrass::fini()$/;"	f	class:CGrass	signature:()
fini	./server/CProperty.cpp	/^void CProperty::fini()$/;"	f	class:CProperty	signature:()
fini	./server/CProtectMask.cpp	/^void CProtectMask::fini()$/;"	f	class:CProtectMask	signature:()
fini	./server/CRiver.cpp	/^void  CRiver::fini()$/;"	f	class:CRiver	signature:()
fini	./server/CWall.cpp	/^void  CWall::fini()$/;"	f	class:CWall	signature:()
fini	./server/GameBullet.cpp	/^void GameBullet::fini() {$/;"	f	class:GameBullet	signature:()
fini	./server/GameEntity.cpp	/^void GameEntity::fini() {$/;"	f	class:GameEntity	signature:()
fini	./server/GameObject.h	/^	virtual void fini() {}$/;"	f	class:GameObject	access:public	signature:()
fireCommonAttack	./server/GameTank.cpp	/^void GameTank::fireCommonAttack(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
firePowerAttack	./server/GameTank.cpp	/^void GameTank::firePowerAttack(game::Direction _dir) {$/;"	f	class:GameTank	signature:(game::Direction _dir)
firstChild	./server/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode	access:protected
game	./autocode/demo.hpp	/^        Game game;$/;"	m	struct:res_gameBack::_Data	access:public
game	./server/GameCommon.h	/^namespace game {$/;"	n
game::Direction	./server/GameCommon.h	/^    enum Direction {$/;"	g	namespace:game
game::kD_MAX	./server/GameCommon.h	/^        kD_MAX = 4$/;"	e	enum:game::Direction
game::kD_NX	./server/GameCommon.h	/^        kD_NX = 2,$/;"	e	enum:game::Direction
game::kD_NY	./server/GameCommon.h	/^        kD_NY = 3,$/;"	e	enum:game::Direction
game::kD_PX	./server/GameCommon.h	/^        kD_PX = 0,$/;"	e	enum:game::Direction
game::kD_PY	./server/GameCommon.h	/^        kD_PY = 1,$/;"	e	enum:game::Direction
generateObjectId	./server/Game.cpp	/^u32 Game::generateObjectId() {$/;"	f	class:Game	signature:()
generatorImmediateFloat	./server/CGameHelper.h	/^	static float generatorImmediateFloat()$/;"	f	class:CGameHelper	access:public	signature:()
generatorImmediateNumber	./server/CGameHelper.h	/^	static int  generatorImmediateNumber(int _maxNum)$/;"	f	class:CGameHelper	access:public	signature:(int _maxNum)
get	./server/PlayerManager.cpp	/^PlayerPtr PlayerManager::get(u32 playerId) {$/;"	f	class:PlayerManager	signature:(u32 playerId)
getHP	./server/CWall.h	/^	u32 getHP()const$/;"	f	class:CWall	access:public	signature:() const
getHP	./server/GameTank.h	/^	u32 getHP()const$/;"	f	class:GameTank	access:public	signature:() const
getInstance	./server/CPropertyFactory.h	/^	static CPropertyFactory & getInstance()$/;"	f	class:CPropertyFactory	access:public	signature:()
getPosition	./server/CProperty.h	/^	vector2f getPosition()const$/;"	f	class:CProperty	access:public	signature:() const
getPropertyName	./server/CProperty.h	/^	str8  getPropertyName()const$/;"	f	class:CProperty	access:public	signature:() const
getRadius	./server/CProperty.h	/^	vector2i getRadius()const$/;"	f	class:CProperty	access:public	signature:() const
getScore	./server/GamePlayer.h	/^	unsigned int getScore()const$/;"	f	class:GamePlayer	access:public	signature:() const
getownid	./server/CProtectMask.h	/^	u32 getownid()const$/;"	f	class:CProtectMask	access:public	signature:() const
grasses	./autocode/demo.hpp	/^    std::vector<CGrass> grasses;$/;"	m	struct:Game	access:public
hp	./autocode/demo.hpp	/^        unsigned int hp;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
inRoom	./autocode/demo.hpp	/^        bool inRoom;$/;"	m	struct:res_playerBaseInfo::_Data	access:public
indent	./server/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	access:private
init	./server/CGrass.cpp	/^void CGrass::init()$/;"	f	class:CGrass	signature:()
init	./server/CProperty.cpp	/^void CProperty::init()$/;"	f	class:CProperty	signature:()
init	./server/CProtectMask.cpp	/^void CProtectMask::init()$/;"	f	class:CProtectMask	signature:()
init	./server/CRiver.cpp	/^void CRiver::init()$/;"	f	class:CRiver	signature:()
init	./server/CWall.cpp	/^void CWall::init()$/;"	f	class:CWall	signature:()
init	./server/GameBullet.cpp	/^void GameBullet::init() {$/;"	f	class:GameBullet	signature:()
init	./server/GameEntity.cpp	/^void GameEntity::init() $/;"	f	class:GameEntity	signature:()
init	./server/GameObject.h	/^    virtual void init() $/;"	f	class:GameObject	access:public	signature:()
init	./server/GameTank.cpp	/^void GameTank::init()$/;"	f	class:GameTank	signature:()
initialize	./server/DemoServer.cpp	/^bool DemoServer::initialize(int argc, const char *argv[]) {$/;"	f	class:DemoServer	signature:(int argc, const char *argv[])
it	./server/Game.h	/^        std::list<ObjectBlock>::iterator it;$/;"	m	struct:Game::ObjectIndexBlock	access:public
it	./server/Game.h	/^        std::map<u32, ObjectIndexBlock>::iterator it;$/;"	m	struct:Game::ObjectBlock	access:public
kD_MAX	./server/GameCommon.h	/^        kD_MAX = 4$/;"	e	enum:game::Direction
kD_NX	./server/GameCommon.h	/^        kD_NX = 2,$/;"	e	enum:game::Direction
kD_NY	./server/GameCommon.h	/^        kD_NY = 3,$/;"	e	enum:game::Direction
kD_PX	./server/GameCommon.h	/^        kD_PX = 0,$/;"	e	enum:game::Direction
kD_PY	./server/GameCommon.h	/^        kD_PY = 1,$/;"	e	enum:game::Direction
kFighting	./server/Room.h	/^        kFighting,$/;"	e	enum:Room::State
kIdle	./server/GameTank.h	/^        kIdle = 0,$/;"	e	enum:GameTank::State
kInsertAccount	./server/DBManager.cpp	/^        kInsertAccount,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
kInsertPlayer	./server/DBManager.cpp	/^        kInsertPlayer,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
kMoving	./server/GameTank.h	/^        kMoving,$/;"	e	enum:GameTank::State
kNotInit	./server/Room.h	/^        kNotInit = 0,$/;"	e	enum:Room::State
kQueryPlayerInfo	./server/DBManager.cpp	/^        kQueryPlayerInfo,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
kSA_Close	./server/PublicLink.h	/^        kSA_Close$/;"	e	enum:PublicLink::SentAction
kSA_None	./server/PublicLink.h	/^        kSA_None = 0,$/;"	e	enum:PublicLink::SentAction
kUpdatePlayerName	./server/DBManager.cpp	/^        kUpdatePlayerName,$/;"	m	struct:DB_STMT	typeref:enum:DB_STMT::	file:	access:public
kWaiting	./server/Room.h	/^        kWaiting,$/;"	e	enum:Room::State
lastChild	./server/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode	access:protected
lineBreak	./server/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	access:private
link	./server/Room.h	/^		PublicLinkPtr link;$/;"	m	struct:Room::Info	access:public
list	./server/Game.h	/^        std::list<ObjectBlock> *list = nullptr;$/;"	m	struct:Game::ObjectIndexBlock	access:public
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_enterRoom	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_login	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_setPlayerName	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankCommonAttack	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankMove	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankPowerAttack	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideBullet	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideEntity	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideMask	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideTank	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletOutOfMap	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletdestoryObject	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_createProperty	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_destoryObject	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_enterRoomOk	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameBack	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameEnd	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameStart	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameTimeStamp	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_getProperty	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerBaseInfo	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerEnterRoom	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerExitRoom	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankCommonAttack	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankMove	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankPowerAttack	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankStop	access:public	signature:(DataStream &s)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_enterRoom	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_login	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_setPlayerName	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideBullet	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideEntity	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideMask	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideTank	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletOutOfMap	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletdestoryObject	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_createProperty	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_destoryObject	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_enterRoomOk	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_gameBack	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_getProperty	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_playerBaseInfo	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_playerExitRoom	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankCommonAttack	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankMove	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankPowerAttack	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankStop	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankCommonAttack	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankMove	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankPowerAttack	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameEnd	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameStart	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameTimeStamp	access:public	signature:(Variable_object &vobj)
load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_playerEnterRoom	access:public	signature:(Variable_object &vobj)
location	./server/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase	access:protected
m_broadcastPackets	./server/Game.h	/^    std::vector<PacketPtr> m_broadcastPackets;$/;"	m	class:Game	access:protected
m_broadcastState	./server/GameTank.h	/^    f32 m_broadcastState = kIdle;$/;"	m	class:GameTank	access:protected
m_broadcastTimer	./server/GameTank.h	/^	f32 m_broadcastTimer = 0;$/;"	m	class:GameTank	access:protected
m_cells	./server/Game.h	/^    std::vector<Cell> m_cells;$/;"	m	class:Game	access:protected
m_commonAttackInterval	./server/GameTank.h	/^	f32 m_commonAttackInterval = 0.5f;$/;"	m	class:GameTank	access:protected
m_commonAttackTimer	./server/GameTank.h	/^	f32 m_commonAttackTimer = 0;$/;"	m	class:GameTank	access:protected
m_console_mode	./server/DemoServer.h	/^    bool m_console_mode = false;$/;"	m	class:DemoServer	access:private
m_console_mode	./server/PublicLink.h	/^    bool m_console_mode = false;$/;"	m	class:PublicLink	access:private
m_console_thread	./server/DemoServer.h	/^    std::unique_ptr<std::thread> m_console_thread;$/;"	m	class:DemoServer	access:private
m_db_passwd	./server/DemoServer.h	/^    str8 m_db_passwd;$/;"	m	class:DemoServer	access:private
m_db_server	./server/DemoServer.h	/^    str8 m_db_server;$/;"	m	class:DemoServer	access:private
m_db_threads	./server/DemoServer.h	/^    size_t m_db_threads = 0;$/;"	m	class:DemoServer	access:private
m_db_user	./server/DemoServer.h	/^    str8 m_db_user;$/;"	m	class:DemoServer	access:private
m_destroyed	./server/GameBullet.h	/^    bool m_destroyed = false;$/;"	m	class:GameBullet	access:protected
m_direction	./server/GameBullet.h	/^    game::Direction m_direction;$/;"	m	class:GameBullet	access:protected
m_direction	./server/GameTank.h	/^    game::Direction m_direction = game::kD_PX;$/;"	m	class:GameTank	access:protected
m_functions	./server/CPropertyFactory.h	/^	std::vector<std::function<CProperty*(Game * ) >> m_functions;$/;"	m	class:CPropertyFactory	access:protected
m_game	./server/GameObject.h	/^    Game *m_game;$/;"	m	class:GameObject	access:protected
m_game	./server/Room.h	/^    std::unique_ptr<Game> m_game;$/;"	m	class:Room	access:private
m_hp	./server/CRiver.h	/^	u32 m_hp;$/;"	m	class:CRiver	access:protected
m_hp	./server/CWall.h	/^	u32 m_hp;$/;"	m	class:CWall	access:protected
m_hp	./server/GameTank.h	/^	u32 m_hp=4;$/;"	m	class:GameTank	access:protected
m_id	./server/MyTest.h	/^  int m_id;$/;"	m	class:Father	access:private
m_incomings	./server/Game.h	/^    std::list<ObjectBlock> m_objects, m_incomings;$/;"	m	class:Game	access:protected
m_initHp	./server/GameTank.h	/^	u32 m_initHp;$/;"	m	class:GameTank	access:protected
m_initPosition	./server/GameTank.h	/^	vector2f m_initPosition;$/;"	m	class:GameTank	access:protected
m_initialized	./server/Player.h	/^    bool m_initialized = false;$/;"	m	class:Player	access:protected
m_isInRoom	./server/Player.h	/^    bool m_isInRoom = false;$/;"	m	class:Player	access:protected
m_lastId	./server/Game.h	/^	u32 m_lastId = 0;$/;"	m	class:Game	access:protected
m_link	./server/Player.h	/^    PublicLinkPtr m_link;$/;"	m	class:Player	access:protected
m_link_pool	./server/DemoServer.h	/^    LinkPool *m_link_pool = nullptr;$/;"	m	class:DemoServer	access:private
m_link_pool_threads	./server/DemoServer.h	/^    size_t m_link_pool_threads = 0;$/;"	m	class:DemoServer	access:private
m_links	./server/LinkManager.h	/^    std::set<Link_TCP_Connection *> m_links;$/;"	m	class:LinkManager	access:private
m_lock	./server/LinkManager.h	/^    SpinLock m_lock;$/;"	m	class:LinkManager	access:private
m_lock	./server/PlayerManager.h	/^	SpinLock m_lock;$/;"	m	class:PlayerManager	access:private
m_login	./server/PublicLink.h	/^    bool m_login = false;$/;"	m	class:PublicLink	access:protected
m_loop	./server/PlayerManager.h	/^	RunLoop m_loop;$/;"	m	class:PlayerManager	access:private
m_loop	./server/RoomManager.h	/^    RunLoop m_loop;$/;"	m	class:RoomManager	access:private
m_mainLoop	./common/ServerApp.h	/^    RunLoop m_mainLoop;$/;"	m	class:ServerApp	access:protected
m_maxSpeed	./server/GameTank.h	/^	f32 m_maxSpeed = 12;$/;"	m	class:GameTank	access:protected
m_movingTimer	./server/GameTank.h	/^	f32 m_movingTimer = 0;$/;"	m	class:GameTank	access:protected
m_name	./server/MyTest.h	/^  int m_name;$/;"	m	class:Father	access:private
m_name	./server/Room.h	/^    str8 m_name;$/;"	m	class:Room	access:private
m_objectId	./server/GameObject.h	/^    u32 m_objectId;$/;"	m	class:GameObject	access:protected
m_objectIndex	./server/Game.h	/^    std::map<u32, ObjectIndexBlock> m_objectIndex;$/;"	m	class:Game	access:protected
m_objects	./server/Game.h	/^    std::list<ObjectBlock> m_objects, m_incomings;$/;"	m	class:Game	access:protected
m_ownerId	./server/CProtectMask.h	/^	u32 m_ownerId;$/;"	m	class:CProtectMask	access:protected
m_ownerId	./server/GameBullet.h	/^    u32 m_ownerId;$/;"	m	class:GameBullet	access:protected
m_packing	./server/PublicLink.h	/^    PackingStream m_packing;$/;"	m	class:PublicLink	access:protected
m_packingLock	./server/PublicLink.h	/^    SpinLock m_packingLock;$/;"	m	class:PublicLink	access:protected
m_path	./common/LogPrinter.h	/^    str8 m_path;$/;"	m	class:LogPrinterFile	access:protected
m_peer	./server/PublicLink.h	/^    NetAddress m_peer;$/;"	m	class:PublicLink	access:private
m_playTime	./server/Game.h	/^	f32 m_playTime;$/;"	m	class:Game	access:protected
m_player	./server/PublicLink.h	/^    Player *m_player;$/;"	m	class:PublicLink	access:protected
m_playerId	./server/Player.h	/^    u32 m_playerId;$/;"	m	class:Player	access:protected
m_playerLock	./server/PublicLink.h	/^    SpinLock m_playerLock;$/;"	m	class:PublicLink	access:protected
m_playerName	./server/Player.h	/^    str8 m_playerName;$/;"	m	class:Player	access:protected
m_playerSeat	./server/GamePlayer.h	/^    size_t m_playerSeat = 0;$/;"	m	class:GamePlayer	access:protected
m_player_count	./server/Room.h	/^    size_t m_player_count = 0;$/;"	m	class:Room	access:private
m_players	./server/PlayerManager.h	/^	std::map<u32, PlayerPtr> m_players;$/;"	m	class:PlayerManager	access:private
m_players	./server/Room.h	/^    std::array<Info, 4> m_players;$/;"	m	class:Room	access:private
m_pool	./server/DBManager.h	/^    WorkPool m_pool;$/;"	m	class:DBManager	access:private
m_position	./server/CGrass.h	/^	vector2f m_position;$/;"	m	class:CGrass	access:protected
m_position	./server/CProperty.h	/^	vector2f m_position;$/;"	m	class:CProperty	access:protected
m_position	./server/CProtectMask.h	/^	vector2f m_position;$/;"	m	class:CProtectMask	access:protected
m_position	./server/GameBullet.h	/^    vector2f m_position;$/;"	m	class:GameBullet	access:protected
m_position	./server/GameEntity.h	/^    vector2f m_position;$/;"	m	class:GameEntity	access:protected
m_power	./server/GameBullet.h	/^	u32 m_power;$/;"	m	class:GameBullet	access:protected
m_powerAttackInterval	./server/GameTank.h	/^	f32 m_powerAttackInterval = 1.0f;$/;"	m	class:GameTank	access:protected
m_powerAttackTimer	./server/GameTank.h	/^	f32 m_powerAttackTimer = 0;$/;"	m	class:GameTank	access:protected
m_propertyName	./server/CProperty.h	/^	str8 m_propertyName;$/;"	m	class:CProperty	access:protected
m_propertyTime	./server/Game.h	/^	f32 m_propertyTime = 20.0f;$/;"	m	class:Game	access:protected
m_propertyTimer	./server/Game.h	/^	f32 m_propertyTimer = 20.0f;$/;"	m	class:Game	access:protected
m_public_listen	./server/DemoServer.h	/^    PublicListen m_public_listen;$/;"	m	class:DemoServer	access:private
m_public_port	./server/DemoServer.h	/^    u16 m_public_port = 0;$/;"	m	class:DemoServer	access:private
m_radius	./server/CGrass.h	/^	vector2i m_radius;$/;"	m	class:CGrass	access:protected
m_radius	./server/CProperty.h	/^	vector2i m_radius;$/;"	m	class:CProperty	access:protected
m_radius	./server/CProtectMask.h	/^	vector2i m_radius;$/;"	m	class:CProtectMask	access:protected
m_radius	./server/GameBullet.h	/^    vector2i m_radius;$/;"	m	class:GameBullet	access:protected
m_radius	./server/GameEntity.h	/^    vector2i m_radius;$/;"	m	class:GameEntity	access:protected
m_removeds	./server/Game.h	/^    std::vector<std::list<ObjectBlock>::iterator> m_removeds;$/;"	m	class:Game	access:protected
m_room	./server/Game.h	/^	Room *m_room;$/;"	m	class:Game	access:protected
m_room	./server/Player.h	/^    RefCountedPtr<Room> m_room;$/;"	m	class:Player	access:protected
m_room	./server/PublicLink.h	/^    Room *m_room;$/;"	m	class:PublicLink	access:protected
m_roomIndex	./server/RoomManager.h	/^    std::map<str8, Room *> m_roomIndex;$/;"	m	class:RoomManager	access:private
m_roomIndexLock	./server/RoomManager.h	/^    ReadWriteLock m_roomIndexLock;$/;"	m	class:RoomManager	access:private
m_roomLock	./server/PublicLink.h	/^    SpinLock m_roomLock;$/;"	m	class:PublicLink	access:protected
m_room_seat	./server/PublicLink.h	/^    size_t m_room_seat = 0;$/;"	m	class:PublicLink	access:protected
m_rooms	./server/RoomManager.h	/^    std::set<RoomPtr> m_rooms;$/;"	m	class:RoomManager	access:private
m_score	./server/GamePlayer.h	/^	unsigned int m_score = 0;$/;"	m	class:GamePlayer	access:protected
m_speed	./server/GameBullet.h	/^    f32 m_speed;$/;"	m	class:GameBullet	access:protected
m_speed	./server/GameTank.h	/^	f32 m_speed = 5;$/;"	m	class:GameTank	access:protected
m_speedUp	./server/CSpeedUpProperty.h	/^	f32 m_speedUp = 4.0f;$/;"	m	class:CSpeedUpProperty	access:protected
m_state	./server/GameTank.h	/^    State m_state = kIdle;$/;"	m	class:GameTank	access:protected
m_state	./server/Room.h	/^    State m_state = kNotInit;$/;"	m	class:Room	access:private
m_survivalTime	./server/CProperty.h	/^	f32 m_survivalTime;$/;"	m	class:CProperty	access:protected
m_survivalTime	./server/CProtectMask.h	/^	f32 m_survivalTime;$/;"	m	class:CProtectMask	access:protected
m_thread	./server/PlayerManager.h	/^    std::thread m_thread;$/;"	m	class:PlayerManager	access:private
m_thread	./server/RoomManager.h	/^    std::unique_ptr<std::thread> m_thread;$/;"	m	class:RoomManager	access:private
m_time_stamp	./server/Game.h	/^    f32 m_time_stamp = 0;$/;"	m	class:Game	access:protected
m_unpacking	./server/PublicLink.h	/^    UnpackingStream m_unpacking;$/;"	m	class:PublicLink	access:protected
m_updateTimer	./server/Game.h	/^    f32 m_updateTimer = 0;$/;"	m	class:Game	access:protected
m_updating	./server/Game.h	/^    bool m_updating = false;$/;"	m	class:Game	access:protected
m_velocity	./server/GameBullet.h	/^    vector2f m_velocity;$/;"	m	class:GameBullet	access:protected
m_velocity	./server/GameDynamicEntity.h	/^    vector2f m_velocity;$/;"	m	class:GameDynamicEntity	access:protected
main	./common/ServerApp.cpp	/^int ServerApp::main(int argc, const char *argv[]) {$/;"	f	class:ServerApp	signature:(int argc, const char *argv[])
main	./common/ServerApp.cpp	/^int main(int argc, const char * argv[]) {$/;"	f	signature:(int argc, const char * argv[])
maskId	./autocode/demo.hpp	/^        unsigned int maskId;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
mask_check	./server/Game.cpp	/^bool Game::mask_check(const vector2i &_pos, const vector2i &_radius, u32 ownId) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius, u32 ownId) const
move	./server/GameTank.cpp	/^void GameTank::move(game::Direction _dir, f32 _time) {$/;"	f	class:GameTank	signature:(game::Direction _dir, f32 _time)
name	./server/Room.h	/^    const str8 & name() { return m_name; }$/;"	f	class:Room	access:public	signature:()
name	./server/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute	access:private
next	./server/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute	access:private
next	./server/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode	access:protected
node	./server/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle	access:private
obj	./server/Game.h	/^        GameObjectPtr obj;$/;"	m	struct:Game::ObjectBlock	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletOutOfMap::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletdestoryObject::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_destoryObject::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_tankMove::_Data	access:public
objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_tankStop::_Data	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CGrass	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CProperty	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CProtectMask	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CRiver	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:CWall	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:GameBullet	access:public
objectId	./autocode/demo.hpp	/^    unsigned int objectId;$/;"	m	struct:GameTank	access:public
objectId	./server/GameObject.h	/^    u32 objectId() const { return m_objectId; }$/;"	f	class:GameObject	access:public	signature:() const
operator <	./server/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const CGrass &v) {$/;"	f	signature:(DataStream &s, const CGrass &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const CProperty &v) {$/;"	f	signature:(DataStream &s, const CProperty &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const CProtectMask &v) {$/;"	f	signature:(DataStream &s, const CProtectMask &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const CRiver &v) {$/;"	f	signature:(DataStream &s, const CRiver &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const CWall &v) {$/;"	f	signature:(DataStream &s, const CWall &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const Game &v) {$/;"	f	signature:(DataStream &s, const Game &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const GameBullet &v) {$/;"	f	signature:(DataStream &s, const GameBullet &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const GamePlayer &v) {$/;"	f	signature:(DataStream &s, const GamePlayer &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const GameTank &v) {$/;"	f	signature:(DataStream &s, const GameTank &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const PlayerRank &v) {$/;"	f	signature:(DataStream &s, const PlayerRank &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const Rank &v) {$/;"	f	signature:(DataStream &s, const Rank &v)
operator <<	./autocode/demo.hpp	/^inline DataStream & operator <<(DataStream &s, const RoomSeatInfo &v) {$/;"	f	signature:(DataStream &s, const RoomSeatInfo &v)
operator <<	./server/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	signature:(std::ostream & out, const TiXmlNode & base)
operator <<	./server/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	signature:(std::string& out, const TiXmlNode& base )
operator =	./server/tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	signature:( const TiXmlComment& base )
operator =	./server/tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	signature:( const TiXmlDeclaration& copy )
operator =	./server/tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	signature:( const TiXmlDocument& copy )
operator =	./server/tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	signature:( const TiXmlElement& base )
operator =	./server/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle	access:public	signature:( const TiXmlHandle& ref )
operator =	./server/tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText	access:public	signature:( const TiXmlText& base )
operator =	./server/tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown	access:public	signature:( const TiXmlUnknown& copy )
operator ==	./server/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >	./server/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	access:public	signature:( const TiXmlAttribute& rhs ) const
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, CGrass &v) {$/;"	f	signature:(DataStream &s, CGrass &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, CProperty &v) {$/;"	f	signature:(DataStream &s, CProperty &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, CProtectMask &v) {$/;"	f	signature:(DataStream &s, CProtectMask &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, CRiver &v) {$/;"	f	signature:(DataStream &s, CRiver &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, CWall &v) {$/;"	f	signature:(DataStream &s, CWall &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, Game &v) {$/;"	f	signature:(DataStream &s, Game &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, GameBullet &v) {$/;"	f	signature:(DataStream &s, GameBullet &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, GamePlayer &v) {$/;"	f	signature:(DataStream &s, GamePlayer &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, GameTank &v) {$/;"	f	signature:(DataStream &s, GameTank &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, PlayerRank &v) {$/;"	f	signature:(DataStream &s, PlayerRank &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, Rank &v) {$/;"	f	signature:(DataStream &s, Rank &v)
operator >>	./autocode/demo.hpp	/^inline DataStream & operator >>(DataStream &s, RoomSeatInfo &v) {$/;"	f	signature:(DataStream &s, RoomSeatInfo &v)
operator >>	./server/tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f	signature:(std::istream & in, TiXmlNode & base)
ownerId	./autocode/demo.hpp	/^    unsigned int ownerId;$/;"	m	struct:CProtectMask	access:public
ownerId	./autocode/demo.hpp	/^    unsigned int ownerId;$/;"	m	struct:GameBullet	access:public
ownerId	./server/GameBullet.h	/^    u32 ownerId() const { return m_ownerId; }$/;"	f	class:GameBullet	access:public	signature:() const
pMask	./server/Game.h	/^		CProtectMask *pMask = nullptr;$/;"	m	struct:Game::Cell	access:public
pProperty	./server/Game.h	/^		CProperty *pProperty = nullptr;$/;"	m	struct:Game::Cell	access:public
parent	./server/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode	access:protected
pfn	./common/ServerApp.cpp	/^ServerApp * (*& ServerAppCreator::pfn())() {$/;"	f	signature:()
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_backGame	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_createDemoRoom	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_endDemoGame	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_enterRoom	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_exitRoom	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_getPlayerBaseInfo	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_login	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_setPlayerName	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_startGame	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankCommonAttack	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankMove	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankPowerAttack	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankStop	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_backGameFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideBullet	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideEntity	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideMask	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideTank	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletOutOfMap	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletdestoryObject	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createDemoRoomFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createDemoRoomOk	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createProperty	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_destoryObject	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_enterRoomFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_enterRoomOk	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_exitRoomFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_exitRoomOk	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameBack	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameEnd	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameStart	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameTimeStamp	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_getProperty	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginAnother	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginOk	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerBaseInfo	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerEnterRoom	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerExitRoom	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_setPlayerNameFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_setPlayerNameOk	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_startGameFailed	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankCommonAttack	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankMove	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankPowerAttack	access:public	signature:() const
pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankStop	access:public	signature:() const
pkt	./server/GameCommon.h	/^namespace pkt {$/;"	n
player	./server/Room.h	/^		PlayerPtr player;$/;"	m	struct:Room::Info	access:public
playerId	./server/Player.h	/^    u32 playerId() const { return m_playerId; }$/;"	f	class:Player	access:public	signature:() const
playerName	./autocode/demo.hpp	/^        str8 playerName;$/;"	m	struct:req_setPlayerName::_Data	access:public
playerName	./autocode/demo.hpp	/^        str8 playerName;$/;"	m	struct:res_playerBaseInfo::_Data	access:public
playerName	./autocode/demo.hpp	/^    str8 playerName;$/;"	m	struct:RoomSeatInfo	access:public
playerName	./server/DBManager.h	/^        str8 playerName;$/;"	m	struct:DBManager::PlayerInfo	access:public
playerName	./server/Player.h	/^    const str8 & playerName() const { return m_playerName; }$/;"	f	class:Player	access:public	signature:() const
playerSeat	./server/GamePlayer.h	/^	size_t playerSeat() const { return m_playerSeat; }$/;"	f	class:GamePlayer	access:public	signature:() const
players	./autocode/demo.hpp	/^        std::vector<RoomSeatInfo> players;$/;"	m	struct:res_enterRoomOk::_Data	access:public
players	./autocode/demo.hpp	/^        std::vector<RoomSeatInfo> players;$/;"	m	struct:res_gameBack::_Data	access:public
players	./autocode/demo.hpp	/^    std::vector<GamePlayer> players;$/;"	m	struct:Game	access:public
position	./server/GameBullet.h	/^    const vector2f & position() const { return m_position; }$/;"	f	class:GameBullet	access:public	signature:() const
position	./server/GameEntity.h	/^    const vector2f & position() const { return m_position; }$/;"	f	class:GameEntity	access:public	signature:() const
positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_tankMove::_Data	access:public
positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_tankStop::_Data	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CGrass	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CProperty	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CProtectMask	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CRiver	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:CWall	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:GameBullet	access:public
positionX	./autocode/demo.hpp	/^    f32 positionX;$/;"	m	struct:GameTank	access:public
positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_tankMove::_Data	access:public
positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_tankStop::_Data	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CGrass	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CProperty	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CProtectMask	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CRiver	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:CWall	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:GameBullet	access:public
positionY	./autocode/demo.hpp	/^    f32 positionY;$/;"	m	struct:GameTank	access:public
post	./common/ServerApp.cpp	/^void ServerApp::post(std::function<void ()> fn) {$/;"	f	class:ServerApp	signature:(std::function<void ()> fn)
post	./server/PlayerManager.cpp	/^void PlayerManager::post(std::function<void()> fn) {$/;"	f	class:PlayerManager	signature:(std::function<void()> fn)
post	./server/RoomManager.cpp	/^void RoomManager::post(std::function<void()> fn) {$/;"	f	class:RoomManager	signature:(std::function<void()> fn)
ppId	./autocode/demo.hpp	/^        str8 ppId;$/;"	m	struct:req_login::_Data	access:public
ppToken	./autocode/demo.hpp	/^        str8 ppToken;$/;"	m	struct:req_login::_Data	access:public
prev	./server/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute	access:private
prev	./server/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode	access:protected
print	./common/LogPrinter.cpp	/^void LogPrinterFile::print(Log::Level l, const c8 *, int, str8 &&s) {$/;"	f	class:LogPrinterFile	signature:(Log::Level l, const c8 *, int, str8 &&s)
produceEffect	./CMoney.cpp	/^void CMoney::produceEffect(GameTank *ptank)const$/;"	f	class:CMoney	signature:(GameTank *ptank) const
produceEffect	./server/CMoney.cpp	/^void CMoney::produceEffect(GameTank *ptank)const$/;"	f	class:CMoney	signature:(GameTank *ptank) const
produceEffect	./server/CSpeedUpProperty.cpp	/^void CSpeedUpProperty::produceEffect(GameTank *ptank)const$/;"	f	class:CSpeedUpProperty	signature:(GameTank *ptank) const
produceProperty	./server/CPropertyFactory.cpp	/^CProperty * CPropertyFactory::produceProperty(Game *pGame)$/;"	f	class:CPropertyFactory	signature:(Game *pGame)
properties	./autocode/demo.hpp	/^    std::vector<CProperty> properties;$/;"	m	struct:Game	access:public
property	./autocode/demo.hpp	/^        CProperty property;$/;"	m	struct:res_createProperty::_Data	access:public
property	./autocode/demo.hpp	/^        CProperty property;$/;"	m	struct:res_getProperty::_Data	access:public
propertyName	./autocode/demo.hpp	/^    str8 propertyName;$/;"	m	struct:CProperty	access:public
property_check	./server/Game.cpp	/^CProperty*  Game::property_check(const vector2i &_pos, const vector2i &_radius) const$/;"	f	class:Game	signature:(const vector2i &_pos, const vector2i &_radius) const
protectmasks	./autocode/demo.hpp	/^    std::vector<CProtectMask> protectmasks;$/;"	m	struct:Game	access:public
quit	./common/ServerApp.cpp	/^void ServerApp::quit() {$/;"	f	class:ServerApp	signature:()
radius	./server/GameBullet.h	/^    const vector2i & radius() const { return m_radius; }$/;"	f	class:GameBullet	access:public	signature:() const
radius	./server/GameEntity.h	/^    const vector2i & radius() const { return m_radius; }$/;"	f	class:GameEntity	access:public	signature:() const
ranks	./autocode/demo.hpp	/^    std::vector<PlayerRank> ranks;$/;"	m	struct:Rank	access:public
registFun	./server/CPropertyFactory.cpp	/^void CPropertyFactory::registFun(std::function<CProperty*(Game *) > _fun)$/;"	f	class:CPropertyFactory	signature:(std::function<CProperty*(Game *) > _fun)
remove	./server/LinkManager.cpp	/^void LinkManager::remove(Link_TCP_Connection *link) {$/;"	f	class:LinkManager	signature:(Link_TCP_Connection *link)
remove	./server/PlayerManager.cpp	/^void PlayerManager::remove(u32 playerId) {$/;"	f	class:PlayerManager	signature:(u32 playerId)
removeObject	./server/Game.cpp	/^void Game::removeObject(u32 objectId) {$/;"	f	class:Game	signature:(u32 objectId)
req_backGame	./autocode/demo.hpp	/^class req_backGame : public Packet {$/;"	c	inherits:Packet
req_backGame::ID	./autocode/demo.hpp	/^    enum { ID = 65 };$/;"	e	enum:req_backGame::__anon22
req_backGame::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_backGame	access:public	signature:() const
req_createDemoRoom	./autocode/demo.hpp	/^class req_createDemoRoom : public Packet {$/;"	c	inherits:Packet
req_createDemoRoom::ID	./autocode/demo.hpp	/^    enum { ID = 1000 };$/;"	e	enum:req_createDemoRoom::__anon43
req_createDemoRoom::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_createDemoRoom	access:public	signature:() const
req_endDemoGame	./autocode/demo.hpp	/^class req_endDemoGame : public Packet {$/;"	c	inherits:Packet
req_endDemoGame::ID	./autocode/demo.hpp	/^    enum { ID = 1010 };$/;"	e	enum:req_endDemoGame::__anon46
req_endDemoGame::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_endDemoGame	access:public	signature:() const
req_enterRoom	./autocode/demo.hpp	/^class req_enterRoom : public Packet {$/;"	c	inherits:Packet
req_enterRoom::ID	./autocode/demo.hpp	/^    enum { ID = 50 };$/;"	e	enum:req_enterRoom::__anon13
req_enterRoom::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_enterRoom	access:public
req_enterRoom::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_enterRoom::_Data	access:public	signature:(Variable_object &_vobj)
req_enterRoom::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_enterRoom::_Data	access:public	signature:(Variable_object &_vobj) const
req_enterRoom::_Data::roomName	./autocode/demo.hpp	/^        str8 roomName;$/;"	m	struct:req_enterRoom::_Data	access:public
req_enterRoom::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_enterRoom	typeref:struct:req_enterRoom::_Data	access:public
req_enterRoom::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_enterRoom	access:public	signature:(DataStream &s)
req_enterRoom::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_enterRoom	access:public	signature:(Variable_object &vobj)
req_enterRoom::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_enterRoom	access:public	signature:() const
req_enterRoom::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_enterRoom	access:public	signature:(DataStream &s) const
req_enterRoom::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_enterRoom	access:public	signature:(Variable_object &vobj) const
req_exitRoom	./autocode/demo.hpp	/^class req_exitRoom : public Packet {$/;"	c	inherits:Packet
req_exitRoom::ID	./autocode/demo.hpp	/^    enum { ID = 40 };$/;"	e	enum:req_exitRoom::__anon10
req_exitRoom::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_exitRoom	access:public	signature:() const
req_getPlayerBaseInfo	./autocode/demo.hpp	/^class req_getPlayerBaseInfo : public Packet {$/;"	c	inherits:Packet
req_getPlayerBaseInfo::ID	./autocode/demo.hpp	/^    enum { ID = 20 };$/;"	e	enum:req_getPlayerBaseInfo::__anon5
req_getPlayerBaseInfo::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_getPlayerBaseInfo	access:public	signature:() const
req_login	./autocode/demo.hpp	/^class req_login : public Packet {$/;"	c	inherits:Packet
req_login::ID	./autocode/demo.hpp	/^    enum { ID = 10 };$/;"	e	enum:req_login::__anon1
req_login::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_login	access:public
req_login::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_login::_Data	access:public	signature:(Variable_object &_vobj)
req_login::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_login::_Data	access:public	signature:(Variable_object &_vobj) const
req_login::_Data::ppId	./autocode/demo.hpp	/^        str8 ppId;$/;"	m	struct:req_login::_Data	access:public
req_login::_Data::ppToken	./autocode/demo.hpp	/^        str8 ppToken;$/;"	m	struct:req_login::_Data	access:public
req_login::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_login	typeref:struct:req_login::_Data	access:public
req_login::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_login	access:public	signature:(DataStream &s)
req_login::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_login	access:public	signature:(Variable_object &vobj)
req_login::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_login	access:public	signature:() const
req_login::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_login	access:public	signature:(DataStream &s) const
req_login::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_login	access:public	signature:(Variable_object &vobj) const
req_setPlayerName	./autocode/demo.hpp	/^class req_setPlayerName : public Packet {$/;"	c	inherits:Packet
req_setPlayerName::ID	./autocode/demo.hpp	/^    enum { ID = 30 };$/;"	e	enum:req_setPlayerName::__anon7
req_setPlayerName::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:req_setPlayerName	access:public
req_setPlayerName::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:req_setPlayerName::_Data	access:public	signature:(Variable_object &_vobj)
req_setPlayerName::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:req_setPlayerName::_Data	access:public	signature:(Variable_object &_vobj) const
req_setPlayerName::_Data::playerName	./autocode/demo.hpp	/^        str8 playerName;$/;"	m	struct:req_setPlayerName::_Data	access:public
req_setPlayerName::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:req_setPlayerName	typeref:struct:req_setPlayerName::_Data	access:public
req_setPlayerName::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_setPlayerName	access:public	signature:(DataStream &s)
req_setPlayerName::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:req_setPlayerName	access:public	signature:(Variable_object &vobj)
req_setPlayerName::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_setPlayerName	access:public	signature:() const
req_setPlayerName::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_setPlayerName	access:public	signature:(DataStream &s) const
req_setPlayerName::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_setPlayerName	access:public	signature:(Variable_object &vobj) const
req_startGame	./autocode/demo.hpp	/^class req_startGame : public Packet {$/;"	c	inherits:Packet
req_startGame::ID	./autocode/demo.hpp	/^    enum { ID = 60 };$/;"	e	enum:req_startGame::__anon16
req_startGame::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_startGame	access:public	signature:() const
req_tankCommonAttack	./autocode/demo.hpp	/^class req_tankCommonAttack : public Packet {$/;"	c	inherits:Packet
req_tankCommonAttack::ID	./autocode/demo.hpp	/^    enum { ID = 64 };$/;"	e	enum:req_tankCommonAttack::__anon20
req_tankCommonAttack::data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankCommonAttack	access:public
req_tankCommonAttack::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankCommonAttack	access:public	signature:(DataStream &s)
req_tankCommonAttack::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankCommonAttack	access:public	signature:(Variable_object &vobj)
req_tankCommonAttack::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankCommonAttack	access:public	signature:() const
req_tankCommonAttack::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankCommonAttack	access:public	signature:(DataStream &s) const
req_tankCommonAttack::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankCommonAttack	access:public	signature:(Variable_object &vobj) const
req_tankMove	./autocode/demo.hpp	/^class req_tankMove : public Packet {$/;"	c	inherits:Packet
req_tankMove::ID	./autocode/demo.hpp	/^    enum { ID = 62 };$/;"	e	enum:req_tankMove::__anon18
req_tankMove::data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankMove	access:public
req_tankMove::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankMove	access:public	signature:(DataStream &s)
req_tankMove::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankMove	access:public	signature:(Variable_object &vobj)
req_tankMove::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankMove	access:public	signature:() const
req_tankMove::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankMove	access:public	signature:(DataStream &s) const
req_tankMove::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankMove	access:public	signature:(Variable_object &vobj) const
req_tankPowerAttack	./autocode/demo.hpp	/^class req_tankPowerAttack : public Packet {$/;"	c	inherits:Packet
req_tankPowerAttack::ID	./autocode/demo.hpp	/^    enum { ID = 67 };$/;"	e	enum:req_tankPowerAttack::__anon21
req_tankPowerAttack::data	./autocode/demo.hpp	/^    unsigned int data;$/;"	m	class:req_tankPowerAttack	access:public
req_tankPowerAttack::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:req_tankPowerAttack	access:public	signature:(DataStream &s)
req_tankPowerAttack::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:req_tankPowerAttack	access:public	signature:(Variable_object &vobj)
req_tankPowerAttack::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankPowerAttack	access:public	signature:() const
req_tankPowerAttack::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankPowerAttack	access:public	signature:(DataStream &s) const
req_tankPowerAttack::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankPowerAttack	access:public	signature:(Variable_object &vobj) const
req_tankStop	./autocode/demo.hpp	/^class req_tankStop : public Packet {$/;"	c	inherits:Packet
req_tankStop::ID	./autocode/demo.hpp	/^    enum { ID = 63 };$/;"	e	enum:req_tankStop::__anon19
req_tankStop::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:req_tankStop	access:public	signature:() const
res_backGameFailed	./autocode/demo.hpp	/^class res_backGameFailed : public Packet {$/;"	c	inherits:Packet
res_backGameFailed::ID	./autocode/demo.hpp	/^    enum { ID = 66 };$/;"	e	enum:res_backGameFailed::__anon23
res_backGameFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_backGameFailed	access:public	signature:() const
res_bulletCollideBullet	./autocode/demo.hpp	/^class res_bulletCollideBullet : public Packet {$/;"	c	inherits:Packet
res_bulletCollideBullet::ID	./autocode/demo.hpp	/^    enum { ID = 209 };$/;"	e	enum:res_bulletCollideBullet::__anon35
res_bulletCollideBullet::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideBullet	access:public
res_bulletCollideBullet::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideBullet::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletCollideBullet::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideBullet::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletCollideBullet::_Data::bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
res_bulletCollideBullet::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
res_bulletCollideBullet::_Data::positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
res_bulletCollideBullet::_Data::positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideBullet::_Data	access:public
res_bulletCollideBullet::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideBullet	typeref:struct:res_bulletCollideBullet::_Data	access:public
res_bulletCollideBullet::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideBullet	access:public	signature:(DataStream &s)
res_bulletCollideBullet::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideBullet	access:public	signature:(Variable_object &vobj)
res_bulletCollideBullet::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideBullet	access:public	signature:() const
res_bulletCollideBullet::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideBullet	access:public	signature:(DataStream &s) const
res_bulletCollideBullet::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideBullet	access:public	signature:(Variable_object &vobj) const
res_bulletCollideEntity	./autocode/demo.hpp	/^class res_bulletCollideEntity : public Packet {$/;"	c	inherits:Packet
res_bulletCollideEntity::ID	./autocode/demo.hpp	/^    enum { ID = 210 };$/;"	e	enum:res_bulletCollideEntity::__anon36
res_bulletCollideEntity::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideEntity	access:public
res_bulletCollideEntity::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideEntity::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletCollideEntity::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideEntity::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletCollideEntity::_Data::entityId	./autocode/demo.hpp	/^        unsigned int entityId;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
res_bulletCollideEntity::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
res_bulletCollideEntity::_Data::positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
res_bulletCollideEntity::_Data::positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideEntity::_Data	access:public
res_bulletCollideEntity::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideEntity	typeref:struct:res_bulletCollideEntity::_Data	access:public
res_bulletCollideEntity::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideEntity	access:public	signature:(DataStream &s)
res_bulletCollideEntity::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideEntity	access:public	signature:(Variable_object &vobj)
res_bulletCollideEntity::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideEntity	access:public	signature:() const
res_bulletCollideEntity::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideEntity	access:public	signature:(DataStream &s) const
res_bulletCollideEntity::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideEntity	access:public	signature:(Variable_object &vobj) const
res_bulletCollideMask	./autocode/demo.hpp	/^class res_bulletCollideMask : public Packet {$/;"	c	inherits:Packet
res_bulletCollideMask::ID	./autocode/demo.hpp	/^    enum { ID = 310 };$/;"	e	enum:res_bulletCollideMask::__anon40
res_bulletCollideMask::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideMask	access:public
res_bulletCollideMask::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideMask::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletCollideMask::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideMask::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletCollideMask::_Data::maskId	./autocode/demo.hpp	/^        unsigned int maskId;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
res_bulletCollideMask::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
res_bulletCollideMask::_Data::positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
res_bulletCollideMask::_Data::positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_bulletCollideMask::_Data	access:public
res_bulletCollideMask::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideMask	typeref:struct:res_bulletCollideMask::_Data	access:public
res_bulletCollideMask::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideMask	access:public	signature:(DataStream &s)
res_bulletCollideMask::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideMask	access:public	signature:(Variable_object &vobj)
res_bulletCollideMask::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideMask	access:public	signature:() const
res_bulletCollideMask::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideMask	access:public	signature:(DataStream &s) const
res_bulletCollideMask::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideMask	access:public	signature:(Variable_object &vobj) const
res_bulletCollideTank	./autocode/demo.hpp	/^class res_bulletCollideTank : public Packet {$/;"	c	inherits:Packet
res_bulletCollideTank::ID	./autocode/demo.hpp	/^    enum { ID = 311 };$/;"	e	enum:res_bulletCollideTank::__anon41
res_bulletCollideTank::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletCollideTank	access:public
res_bulletCollideTank::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletCollideTank::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletCollideTank::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletCollideTank::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletCollideTank::_Data::bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
res_bulletCollideTank::_Data::hp	./autocode/demo.hpp	/^        unsigned int hp;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
res_bulletCollideTank::_Data::score	./autocode/demo.hpp	/^        unsigned int score;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
res_bulletCollideTank::_Data::tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
res_bulletCollideTank::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletCollideTank	typeref:struct:res_bulletCollideTank::_Data	access:public
res_bulletCollideTank::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletCollideTank	access:public	signature:(DataStream &s)
res_bulletCollideTank::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletCollideTank	access:public	signature:(Variable_object &vobj)
res_bulletCollideTank::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletCollideTank	access:public	signature:() const
res_bulletCollideTank::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideTank	access:public	signature:(DataStream &s) const
res_bulletCollideTank::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideTank	access:public	signature:(Variable_object &vobj) const
res_bulletOutOfMap	./autocode/demo.hpp	/^class res_bulletOutOfMap : public Packet {$/;"	c	inherits:Packet
res_bulletOutOfMap::ID	./autocode/demo.hpp	/^    enum { ID = 208 };$/;"	e	enum:res_bulletOutOfMap::__anon34
res_bulletOutOfMap::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletOutOfMap	access:public
res_bulletOutOfMap::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletOutOfMap::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletOutOfMap::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletOutOfMap::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletOutOfMap::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletOutOfMap::_Data	access:public
res_bulletOutOfMap::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletOutOfMap	typeref:struct:res_bulletOutOfMap::_Data	access:public
res_bulletOutOfMap::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletOutOfMap	access:public	signature:(DataStream &s)
res_bulletOutOfMap::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletOutOfMap	access:public	signature:(Variable_object &vobj)
res_bulletOutOfMap::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletOutOfMap	access:public	signature:() const
res_bulletOutOfMap::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletOutOfMap	access:public	signature:(DataStream &s) const
res_bulletOutOfMap::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletOutOfMap	access:public	signature:(Variable_object &vobj) const
res_bulletdestoryObject	./autocode/demo.hpp	/^class res_bulletdestoryObject : public Packet {$/;"	c	inherits:Packet
res_bulletdestoryObject::ID	./autocode/demo.hpp	/^    enum { ID = 400 };$/;"	e	enum:res_bulletdestoryObject::__anon42
res_bulletdestoryObject::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_bulletdestoryObject	access:public
res_bulletdestoryObject::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_bulletdestoryObject::_Data	access:public	signature:(Variable_object &_vobj)
res_bulletdestoryObject::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_bulletdestoryObject::_Data	access:public	signature:(Variable_object &_vobj) const
res_bulletdestoryObject::_Data::bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_bulletdestoryObject::_Data	access:public
res_bulletdestoryObject::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_bulletdestoryObject::_Data	access:public
res_bulletdestoryObject::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_bulletdestoryObject	typeref:struct:res_bulletdestoryObject::_Data	access:public
res_bulletdestoryObject::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_bulletdestoryObject	access:public	signature:(DataStream &s)
res_bulletdestoryObject::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_bulletdestoryObject	access:public	signature:(Variable_object &vobj)
res_bulletdestoryObject::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_bulletdestoryObject	access:public	signature:() const
res_bulletdestoryObject::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletdestoryObject	access:public	signature:(DataStream &s) const
res_bulletdestoryObject::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletdestoryObject	access:public	signature:(Variable_object &vobj) const
res_createDemoRoomFailed	./autocode/demo.hpp	/^class res_createDemoRoomFailed : public Packet {$/;"	c	inherits:Packet
res_createDemoRoomFailed::ID	./autocode/demo.hpp	/^    enum { ID = 1002 };$/;"	e	enum:res_createDemoRoomFailed::__anon45
res_createDemoRoomFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createDemoRoomFailed	access:public	signature:() const
res_createDemoRoomOk	./autocode/demo.hpp	/^class res_createDemoRoomOk : public Packet {$/;"	c	inherits:Packet
res_createDemoRoomOk::ID	./autocode/demo.hpp	/^    enum { ID = 1001 };$/;"	e	enum:res_createDemoRoomOk::__anon44
res_createDemoRoomOk::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createDemoRoomOk	access:public	signature:() const
res_createProperty	./autocode/demo.hpp	/^class res_createProperty : public Packet {$/;"	c	inherits:Packet
res_createProperty::ID	./autocode/demo.hpp	/^    enum { ID = 312 };$/;"	e	enum:res_createProperty::__anon24
res_createProperty::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_createProperty	access:public
res_createProperty::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_createProperty::_Data	access:public	signature:(Variable_object &_vobj)
res_createProperty::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_createProperty::_Data	access:public	signature:(Variable_object &_vobj) const
res_createProperty::_Data::property	./autocode/demo.hpp	/^        CProperty property;$/;"	m	struct:res_createProperty::_Data	access:public
res_createProperty::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_createProperty	typeref:struct:res_createProperty::_Data	access:public
res_createProperty::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_createProperty	access:public	signature:(DataStream &s)
res_createProperty::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_createProperty	access:public	signature:(Variable_object &vobj)
res_createProperty::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_createProperty	access:public	signature:() const
res_createProperty::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_createProperty	access:public	signature:(DataStream &s) const
res_createProperty::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_createProperty	access:public	signature:(Variable_object &vobj) const
res_destoryObject	./autocode/demo.hpp	/^class res_destoryObject : public Packet {$/;"	c	inherits:Packet
res_destoryObject::ID	./autocode/demo.hpp	/^    enum { ID = 300 };$/;"	e	enum:res_destoryObject::__anon39
res_destoryObject::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_destoryObject	access:public
res_destoryObject::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_destoryObject::_Data	access:public	signature:(Variable_object &_vobj)
res_destoryObject::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_destoryObject::_Data	access:public	signature:(Variable_object &_vobj) const
res_destoryObject::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_destoryObject::_Data	access:public
res_destoryObject::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_destoryObject	typeref:struct:res_destoryObject::_Data	access:public
res_destoryObject::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_destoryObject	access:public	signature:(DataStream &s)
res_destoryObject::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_destoryObject	access:public	signature:(Variable_object &vobj)
res_destoryObject::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_destoryObject	access:public	signature:() const
res_destoryObject::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_destoryObject	access:public	signature:(DataStream &s) const
res_destoryObject::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_destoryObject	access:public	signature:(Variable_object &vobj) const
res_enterRoomFailed	./autocode/demo.hpp	/^class res_enterRoomFailed : public Packet {$/;"	c	inherits:Packet
res_enterRoomFailed::ID	./autocode/demo.hpp	/^    enum { ID = 52 };$/;"	e	enum:res_enterRoomFailed::__anon15
res_enterRoomFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_enterRoomFailed	access:public	signature:() const
res_enterRoomOk	./autocode/demo.hpp	/^class res_enterRoomOk : public Packet {$/;"	c	inherits:Packet
res_enterRoomOk::ID	./autocode/demo.hpp	/^    enum { ID = 51 };$/;"	e	enum:res_enterRoomOk::__anon14
res_enterRoomOk::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_enterRoomOk	access:public
res_enterRoomOk::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_enterRoomOk::_Data	access:public	signature:(Variable_object &_vobj)
res_enterRoomOk::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_enterRoomOk::_Data	access:public	signature:(Variable_object &_vobj) const
res_enterRoomOk::_Data::players	./autocode/demo.hpp	/^        std::vector<RoomSeatInfo> players;$/;"	m	struct:res_enterRoomOk::_Data	access:public
res_enterRoomOk::_Data::seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_enterRoomOk::_Data	access:public
res_enterRoomOk::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_enterRoomOk	typeref:struct:res_enterRoomOk::_Data	access:public
res_enterRoomOk::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_enterRoomOk	access:public	signature:(DataStream &s)
res_enterRoomOk::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_enterRoomOk	access:public	signature:(Variable_object &vobj)
res_enterRoomOk::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_enterRoomOk	access:public	signature:() const
res_enterRoomOk::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_enterRoomOk	access:public	signature:(DataStream &s) const
res_enterRoomOk::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_enterRoomOk	access:public	signature:(Variable_object &vobj) const
res_exitRoomFailed	./autocode/demo.hpp	/^class res_exitRoomFailed : public Packet {$/;"	c	inherits:Packet
res_exitRoomFailed::ID	./autocode/demo.hpp	/^    enum { ID = 42 };$/;"	e	enum:res_exitRoomFailed::__anon12
res_exitRoomFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_exitRoomFailed	access:public	signature:() const
res_exitRoomOk	./autocode/demo.hpp	/^class res_exitRoomOk : public Packet {$/;"	c	inherits:Packet
res_exitRoomOk::ID	./autocode/demo.hpp	/^    enum { ID = 41 };$/;"	e	enum:res_exitRoomOk::__anon11
res_exitRoomOk::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_exitRoomOk	access:public	signature:() const
res_gameBack	./autocode/demo.hpp	/^class res_gameBack : public Packet {$/;"	c	inherits:Packet
res_gameBack::ID	./autocode/demo.hpp	/^    enum { ID = 211 };$/;"	e	enum:res_gameBack::__anon37
res_gameBack::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_gameBack	access:public
res_gameBack::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_gameBack::_Data	access:public	signature:(Variable_object &_vobj)
res_gameBack::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_gameBack::_Data	access:public	signature:(Variable_object &_vobj) const
res_gameBack::_Data::game	./autocode/demo.hpp	/^        Game game;$/;"	m	struct:res_gameBack::_Data	access:public
res_gameBack::_Data::players	./autocode/demo.hpp	/^        std::vector<RoomSeatInfo> players;$/;"	m	struct:res_gameBack::_Data	access:public
res_gameBack::_Data::seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_gameBack::_Data	access:public
res_gameBack::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_gameBack	typeref:struct:res_gameBack::_Data	access:public
res_gameBack::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameBack	access:public	signature:(DataStream &s)
res_gameBack::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_gameBack	access:public	signature:(Variable_object &vobj)
res_gameBack::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameBack	access:public	signature:() const
res_gameBack::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameBack	access:public	signature:(DataStream &s) const
res_gameBack::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_gameBack	access:public	signature:(Variable_object &vobj) const
res_gameEnd	./autocode/demo.hpp	/^class res_gameEnd : public Packet {$/;"	c	inherits:Packet
res_gameEnd::ID	./autocode/demo.hpp	/^    enum { ID = 204 };$/;"	e	enum:res_gameEnd::__anon29
res_gameEnd::data	./autocode/demo.hpp	/^    Rank data;$/;"	m	class:res_gameEnd	access:public
res_gameEnd::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameEnd	access:public	signature:(DataStream &s)
res_gameEnd::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameEnd	access:public	signature:(Variable_object &vobj)
res_gameEnd::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameEnd	access:public	signature:() const
res_gameEnd::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameEnd	access:public	signature:(DataStream &s) const
res_gameEnd::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameEnd	access:public	signature:(Variable_object &vobj) const
res_gameStart	./autocode/demo.hpp	/^class res_gameStart : public Packet {$/;"	c	inherits:Packet
res_gameStart::ID	./autocode/demo.hpp	/^    enum { ID = 203 };$/;"	e	enum:res_gameStart::__anon28
res_gameStart::data	./autocode/demo.hpp	/^    Game data;$/;"	m	class:res_gameStart	access:public
res_gameStart::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameStart	access:public	signature:(DataStream &s)
res_gameStart::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameStart	access:public	signature:(Variable_object &vobj)
res_gameStart::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameStart	access:public	signature:() const
res_gameStart::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameStart	access:public	signature:(DataStream &s) const
res_gameStart::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameStart	access:public	signature:(Variable_object &vobj) const
res_gameTimeStamp	./autocode/demo.hpp	/^class res_gameTimeStamp : public Packet {$/;"	c	inherits:Packet
res_gameTimeStamp::ID	./autocode/demo.hpp	/^    enum { ID = 212 };$/;"	e	enum:res_gameTimeStamp::__anon38
res_gameTimeStamp::data	./autocode/demo.hpp	/^    f32 data;$/;"	m	class:res_gameTimeStamp	access:public
res_gameTimeStamp::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_gameTimeStamp	access:public	signature:(DataStream &s)
res_gameTimeStamp::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_gameTimeStamp	access:public	signature:(Variable_object &vobj)
res_gameTimeStamp::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_gameTimeStamp	access:public	signature:() const
res_gameTimeStamp::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameTimeStamp	access:public	signature:(DataStream &s) const
res_gameTimeStamp::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameTimeStamp	access:public	signature:(Variable_object &vobj) const
res_getProperty	./autocode/demo.hpp	/^class res_getProperty : public Packet {$/;"	c	inherits:Packet
res_getProperty::ID	./autocode/demo.hpp	/^    enum { ID = 313 };$/;"	e	enum:res_getProperty::__anon25
res_getProperty::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_getProperty	access:public
res_getProperty::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_getProperty::_Data	access:public	signature:(Variable_object &_vobj)
res_getProperty::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_getProperty::_Data	access:public	signature:(Variable_object &_vobj) const
res_getProperty::_Data::property	./autocode/demo.hpp	/^        CProperty property;$/;"	m	struct:res_getProperty::_Data	access:public
res_getProperty::_Data::tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_getProperty::_Data	access:public
res_getProperty::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_getProperty	typeref:struct:res_getProperty::_Data	access:public
res_getProperty::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_getProperty	access:public	signature:(DataStream &s)
res_getProperty::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_getProperty	access:public	signature:(Variable_object &vobj)
res_getProperty::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_getProperty	access:public	signature:() const
res_getProperty::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_getProperty	access:public	signature:(DataStream &s) const
res_getProperty::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_getProperty	access:public	signature:(Variable_object &vobj) const
res_loginAnother	./autocode/demo.hpp	/^class res_loginAnother : public Packet {$/;"	c	inherits:Packet
res_loginAnother::ID	./autocode/demo.hpp	/^    enum { ID = 13 };$/;"	e	enum:res_loginAnother::__anon4
res_loginAnother::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginAnother	access:public	signature:() const
res_loginFailed	./autocode/demo.hpp	/^class res_loginFailed : public Packet {$/;"	c	inherits:Packet
res_loginFailed::ID	./autocode/demo.hpp	/^    enum { ID = 12 };$/;"	e	enum:res_loginFailed::__anon3
res_loginFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginFailed	access:public	signature:() const
res_loginOk	./autocode/demo.hpp	/^class res_loginOk : public Packet {$/;"	c	inherits:Packet
res_loginOk::ID	./autocode/demo.hpp	/^    enum { ID = 11 };$/;"	e	enum:res_loginOk::__anon2
res_loginOk::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_loginOk	access:public	signature:() const
res_playerBaseInfo	./autocode/demo.hpp	/^class res_playerBaseInfo : public Packet {$/;"	c	inherits:Packet
res_playerBaseInfo::ID	./autocode/demo.hpp	/^    enum { ID = 21 };$/;"	e	enum:res_playerBaseInfo::__anon6
res_playerBaseInfo::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_playerBaseInfo	access:public
res_playerBaseInfo::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_playerBaseInfo::_Data	access:public	signature:(Variable_object &_vobj)
res_playerBaseInfo::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_playerBaseInfo::_Data	access:public	signature:(Variable_object &_vobj) const
res_playerBaseInfo::_Data::inRoom	./autocode/demo.hpp	/^        bool inRoom;$/;"	m	struct:res_playerBaseInfo::_Data	access:public
res_playerBaseInfo::_Data::playerName	./autocode/demo.hpp	/^        str8 playerName;$/;"	m	struct:res_playerBaseInfo::_Data	access:public
res_playerBaseInfo::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_playerBaseInfo	typeref:struct:res_playerBaseInfo::_Data	access:public
res_playerBaseInfo::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerBaseInfo	access:public	signature:(DataStream &s)
res_playerBaseInfo::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_playerBaseInfo	access:public	signature:(Variable_object &vobj)
res_playerBaseInfo::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerBaseInfo	access:public	signature:() const
res_playerBaseInfo::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerBaseInfo	access:public	signature:(DataStream &s) const
res_playerBaseInfo::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_playerBaseInfo	access:public	signature:(Variable_object &vobj) const
res_playerEnterRoom	./autocode/demo.hpp	/^class res_playerEnterRoom : public Packet {$/;"	c	inherits:Packet
res_playerEnterRoom::ID	./autocode/demo.hpp	/^    enum { ID = 202 };$/;"	e	enum:res_playerEnterRoom::__anon27
res_playerEnterRoom::data	./autocode/demo.hpp	/^    RoomSeatInfo data;$/;"	m	class:res_playerEnterRoom	access:public
res_playerEnterRoom::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerEnterRoom	access:public	signature:(DataStream &s)
res_playerEnterRoom::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) {$/;"	f	class:res_playerEnterRoom	access:public	signature:(Variable_object &vobj)
res_playerEnterRoom::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerEnterRoom	access:public	signature:() const
res_playerEnterRoom::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerEnterRoom	access:public	signature:(DataStream &s) const
res_playerEnterRoom::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_playerEnterRoom	access:public	signature:(Variable_object &vobj) const
res_playerExitRoom	./autocode/demo.hpp	/^class res_playerExitRoom : public Packet {$/;"	c	inherits:Packet
res_playerExitRoom::ID	./autocode/demo.hpp	/^    enum { ID = 201 };$/;"	e	enum:res_playerExitRoom::__anon26
res_playerExitRoom::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_playerExitRoom	access:public
res_playerExitRoom::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_playerExitRoom::_Data	access:public	signature:(Variable_object &_vobj)
res_playerExitRoom::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_playerExitRoom::_Data	access:public	signature:(Variable_object &_vobj) const
res_playerExitRoom::_Data::seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_playerExitRoom::_Data	access:public
res_playerExitRoom::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_playerExitRoom	typeref:struct:res_playerExitRoom::_Data	access:public
res_playerExitRoom::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_playerExitRoom	access:public	signature:(DataStream &s)
res_playerExitRoom::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_playerExitRoom	access:public	signature:(Variable_object &vobj)
res_playerExitRoom::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_playerExitRoom	access:public	signature:() const
res_playerExitRoom::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerExitRoom	access:public	signature:(DataStream &s) const
res_playerExitRoom::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_playerExitRoom	access:public	signature:(Variable_object &vobj) const
res_setPlayerNameFailed	./autocode/demo.hpp	/^class res_setPlayerNameFailed : public Packet {$/;"	c	inherits:Packet
res_setPlayerNameFailed::ID	./autocode/demo.hpp	/^    enum { ID = 32 };$/;"	e	enum:res_setPlayerNameFailed::__anon9
res_setPlayerNameFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_setPlayerNameFailed	access:public	signature:() const
res_setPlayerNameOk	./autocode/demo.hpp	/^class res_setPlayerNameOk : public Packet {$/;"	c	inherits:Packet
res_setPlayerNameOk::ID	./autocode/demo.hpp	/^    enum { ID = 31 };$/;"	e	enum:res_setPlayerNameOk::__anon8
res_setPlayerNameOk::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_setPlayerNameOk	access:public	signature:() const
res_startGameFailed	./autocode/demo.hpp	/^class res_startGameFailed : public Packet {$/;"	c	inherits:Packet
res_startGameFailed::ID	./autocode/demo.hpp	/^    enum { ID = 61 };$/;"	e	enum:res_startGameFailed::__anon17
res_startGameFailed::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_startGameFailed	access:public	signature:() const
res_tankCommonAttack	./autocode/demo.hpp	/^class res_tankCommonAttack : public Packet {$/;"	c	inherits:Packet
res_tankCommonAttack::ID	./autocode/demo.hpp	/^    enum { ID = 207 };$/;"	e	enum:res_tankCommonAttack::__anon32
res_tankCommonAttack::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankCommonAttack	access:public
res_tankCommonAttack::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankCommonAttack::_Data	access:public	signature:(Variable_object &_vobj)
res_tankCommonAttack::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankCommonAttack::_Data	access:public	signature:(Variable_object &_vobj) const
res_tankCommonAttack::_Data::bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::bulletPosX	./autocode/demo.hpp	/^        f32 bulletPosX;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::bulletPosY	./autocode/demo.hpp	/^        f32 bulletPosY;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::speed	./autocode/demo.hpp	/^        f32 speed;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::tankPosX	./autocode/demo.hpp	/^        f32 tankPosX;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::_Data::tankPosY	./autocode/demo.hpp	/^        f32 tankPosY;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankCommonAttack	typeref:struct:res_tankCommonAttack::_Data	access:public
res_tankCommonAttack::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankCommonAttack	access:public	signature:(DataStream &s)
res_tankCommonAttack::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankCommonAttack	access:public	signature:(Variable_object &vobj)
res_tankCommonAttack::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankCommonAttack	access:public	signature:() const
res_tankCommonAttack::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankCommonAttack	access:public	signature:(DataStream &s) const
res_tankCommonAttack::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankCommonAttack	access:public	signature:(Variable_object &vobj) const
res_tankMove	./autocode/demo.hpp	/^class res_tankMove : public Packet {$/;"	c	inherits:Packet
res_tankMove::ID	./autocode/demo.hpp	/^    enum { ID = 205 };$/;"	e	enum:res_tankMove::__anon30
res_tankMove::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankMove	access:public
res_tankMove::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankMove::_Data	access:public	signature:(Variable_object &_vobj)
res_tankMove::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankMove::_Data	access:public	signature:(Variable_object &_vobj) const
res_tankMove::_Data::direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankMove::_Data	access:public
res_tankMove::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_tankMove::_Data	access:public
res_tankMove::_Data::positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_tankMove::_Data	access:public
res_tankMove::_Data::positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_tankMove::_Data	access:public
res_tankMove::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankMove	typeref:struct:res_tankMove::_Data	access:public
res_tankMove::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankMove	access:public	signature:(DataStream &s)
res_tankMove::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankMove	access:public	signature:(Variable_object &vobj)
res_tankMove::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankMove	access:public	signature:() const
res_tankMove::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankMove	access:public	signature:(DataStream &s) const
res_tankMove::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankMove	access:public	signature:(Variable_object &vobj) const
res_tankPowerAttack	./autocode/demo.hpp	/^class res_tankPowerAttack : public Packet {$/;"	c	inherits:Packet
res_tankPowerAttack::ID	./autocode/demo.hpp	/^    enum { ID = 217 };$/;"	e	enum:res_tankPowerAttack::__anon33
res_tankPowerAttack::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankPowerAttack	access:public
res_tankPowerAttack::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankPowerAttack::_Data	access:public	signature:(Variable_object &_vobj)
res_tankPowerAttack::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankPowerAttack::_Data	access:public	signature:(Variable_object &_vobj) const
res_tankPowerAttack::_Data::bulletId	./autocode/demo.hpp	/^        unsigned int bulletId;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::bulletPosX	./autocode/demo.hpp	/^        f32 bulletPosX;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::bulletPosY	./autocode/demo.hpp	/^        f32 bulletPosY;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::direction	./autocode/demo.hpp	/^        unsigned int direction;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::speed	./autocode/demo.hpp	/^        f32 speed;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::tankPosX	./autocode/demo.hpp	/^        f32 tankPosX;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::_Data::tankPosY	./autocode/demo.hpp	/^        f32 tankPosY;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankPowerAttack	typeref:struct:res_tankPowerAttack::_Data	access:public
res_tankPowerAttack::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankPowerAttack	access:public	signature:(DataStream &s)
res_tankPowerAttack::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankPowerAttack	access:public	signature:(Variable_object &vobj)
res_tankPowerAttack::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankPowerAttack	access:public	signature:() const
res_tankPowerAttack::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankPowerAttack	access:public	signature:(DataStream &s) const
res_tankPowerAttack::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankPowerAttack	access:public	signature:(Variable_object &vobj) const
res_tankStop	./autocode/demo.hpp	/^class res_tankStop : public Packet {$/;"	c	inherits:Packet
res_tankStop::ID	./autocode/demo.hpp	/^    enum { ID = 206 };$/;"	e	enum:res_tankStop::__anon31
res_tankStop::_Data	./autocode/demo.hpp	/^    struct _Data {$/;"	s	class:res_tankStop	access:public
res_tankStop::_Data::_load	./autocode/demo.hpp	/^        void _load(Variable_object &_vobj) {$/;"	f	struct:res_tankStop::_Data	access:public	signature:(Variable_object &_vobj)
res_tankStop::_Data::_save	./autocode/demo.hpp	/^        void _save(Variable_object &_vobj) const {$/;"	f	struct:res_tankStop::_Data	access:public	signature:(Variable_object &_vobj) const
res_tankStop::_Data::objectId	./autocode/demo.hpp	/^        unsigned int objectId;$/;"	m	struct:res_tankStop::_Data	access:public
res_tankStop::_Data::positionX	./autocode/demo.hpp	/^        f32 positionX;$/;"	m	struct:res_tankStop::_Data	access:public
res_tankStop::_Data::positionY	./autocode/demo.hpp	/^        f32 positionY;$/;"	m	struct:res_tankStop::_Data	access:public
res_tankStop::data	./autocode/demo.hpp	/^    } data;$/;"	m	class:res_tankStop	typeref:struct:res_tankStop::_Data	access:public
res_tankStop::load	./autocode/demo.hpp	/^    virtual void load(DataStream &s) {$/;"	f	class:res_tankStop	access:public	signature:(DataStream &s)
res_tankStop::load	./autocode/demo.hpp	/^    virtual void load(Variable_object &vobj) { data._load(vobj); }$/;"	f	class:res_tankStop	access:public	signature:(Variable_object &vobj)
res_tankStop::pid	./autocode/demo.hpp	/^    virtual u32 pid() const { return ID; }$/;"	f	class:res_tankStop	access:public	signature:() const
res_tankStop::save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankStop	access:public	signature:(DataStream &s) const
res_tankStop::save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankStop	access:public	signature:(Variable_object &vobj) const
resetHp	./server/GameTank.h	/^	void resetHp()$/;"	f	class:GameTank	access:public	signature:()
resetPosition	./server/GameTank.cpp	/^void GameTank::resetPosition()$/;"	f	class:GameTank	signature:()
rivers	./autocode/demo.hpp	/^    std::vector<CRiver> rivers;$/;"	m	struct:Game	access:public
roomName	./autocode/demo.hpp	/^        str8 roomName;$/;"	m	struct:req_enterRoom::_Data	access:public
row	./server/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	access:public
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_enterRoom	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_login	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_setPlayerName	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankCommonAttack	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankMove	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:req_tankPowerAttack	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideBullet	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideEntity	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideMask	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletCollideTank	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletOutOfMap	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_bulletdestoryObject	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_createProperty	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_destoryObject	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_enterRoomOk	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameBack	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameEnd	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameStart	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_gameTimeStamp	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_getProperty	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerBaseInfo	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerEnterRoom	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_playerExitRoom	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankCommonAttack	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankMove	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankPowerAttack	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(DataStream &s) const {$/;"	f	class:res_tankStop	access:public	signature:(DataStream &s) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_enterRoom	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_login	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:req_setPlayerName	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideBullet	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideEntity	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideMask	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletCollideTank	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletOutOfMap	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_bulletdestoryObject	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_createProperty	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_destoryObject	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_enterRoomOk	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_gameBack	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_getProperty	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_playerBaseInfo	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_playerExitRoom	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankCommonAttack	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankMove	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankPowerAttack	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const { data._save(vobj); }$/;"	f	class:res_tankStop	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankCommonAttack	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankMove	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:req_tankPowerAttack	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameEnd	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameStart	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_gameTimeStamp	access:public	signature:(Variable_object &vobj) const
save	./autocode/demo.hpp	/^    virtual void save(Variable_object &vobj) const {$/;"	f	class:res_playerEnterRoom	access:public	signature:(Variable_object &vobj) const
score	./autocode/demo.hpp	/^        unsigned int score;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
scores	./autocode/demo.hpp	/^    unsigned int scores;$/;"	m	struct:PlayerRank	access:public
seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_enterRoomOk::_Data	access:public
seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_gameBack::_Data	access:public
seat	./autocode/demo.hpp	/^        u8 seat;$/;"	m	struct:res_playerExitRoom::_Data	access:public
seat	./autocode/demo.hpp	/^    u8 seat;$/;"	m	struct:RoomSeatInfo	access:public
seat	./autocode/demo.hpp	/^    unsigned int seat;$/;"	m	struct:GamePlayer	access:public
seat	./autocode/demo.hpp	/^    unsigned int seat;$/;"	m	struct:PlayerRank	access:public
sendPacket	./server/PublicLink.cpp	/^void PublicLink::sendPacket(const Packet &pkt, SentAction sa) {$/;"	f	class:PublicLink	signature:(const Packet &pkt, SentAction sa)
sendPackets	./server/PublicLink.cpp	/^void PublicLink::sendPackets(const Packet &head, const std::vector<PacketPtr> &packets) {$/;"	f	class:PublicLink	signature:(const Packet &head, const std::vector<PacketPtr> &packets)
sentinel	./server/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	access:private
setHP	./server/CWall.h	/^	void setHP(u32 _hp)$/;"	f	class:CWall	access:public	signature:(u32 _hp)
setHP	./server/GameTank.h	/^	void setHP(u32 _hp)$/;"	f	class:GameTank	access:public	signature:(u32 _hp)
setPlayer	./server/PublicLink.cpp	/^void PublicLink::setPlayer(Player *player) {$/;"	f	class:PublicLink	signature:(Player *player)
setPosition	./server/CProperty.h	/^	void setPosition(const vector2f &_pos)$/;"	f	class:CProperty	access:public	signature:(const vector2f &_pos)
setRoom	./server/PublicLink.cpp	/^void PublicLink::setRoom(Room *room, size_t seat) {$/;"	f	class:PublicLink	signature:(Room *room, size_t seat)
setScore	./server/GamePlayer.h	/^	void setScore(unsigned int _score)$/;"	f	class:GamePlayer	access:public	signature:(unsigned int _score)
setSeed	./server/GameTank.cpp	/^void GameTank::setSeed(f32 _speed)$/;"	f	class:GameTank	signature:(f32 _speed)
setVelocity	./server/GameDynamicEntity.h	/^    void setVelocity(const vector2f &v) { m_velocity = v; }$/;"	f	class:GameDynamicEntity	access:public	signature:(const vector2f &v)
simpleTextPrint	./server/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	access:private
size	./server/Game.h	/^    const vector2i & size() const { return m_size; }$/;"	f	class:Game	access:public	signature:() const
snapshot	./CMoney.cpp	/^void CMoney::snapshot(pkt::Game &game)$/;"	f	class:CMoney	signature:(pkt::Game &game)
snapshot	./server/CGrass.cpp	/^void CGrass::snapshot(pkt::Game &game)$/;"	f	class:CGrass	signature:(pkt::Game &game)
snapshot	./server/CMoney.cpp	/^void CMoney::snapshot(pkt::Game &game)$/;"	f	class:CMoney	signature:(pkt::Game &game)
snapshot	./server/CProperty.cpp	/^void CProperty::snapshot(pkt::Game &game)$/;"	f	class:CProperty	signature:(pkt::Game &game)
snapshot	./server/CProtectMask.cpp	/^void CProtectMask::snapshot(pkt::Game &game)$/;"	f	class:CProtectMask	signature:(pkt::Game &game)
snapshot	./server/CRiver.cpp	/^void CRiver::snapshot(pkt::Game &game)$/;"	f	class:CRiver	signature:(pkt::Game &game)
snapshot	./server/CSpeedUpProperty.cpp	/^void CSpeedUpProperty::snapshot(pkt::Game &game)$/;"	f	class:CSpeedUpProperty	signature:(pkt::Game &game)
snapshot	./server/CWall.cpp	/^void CWall::snapshot(pkt::Game &game)$/;"	f	class:CWall	signature:(pkt::Game &game)
snapshot	./server/Game.cpp	/^void Game::snapshot(pkt::Game &game) {$/;"	f	class:Game	signature:(pkt::Game &game)
snapshot	./server/GameBullet.cpp	/^void GameBullet::snapshot(pkt::Game &game) {$/;"	f	class:GameBullet	signature:(pkt::Game &game)
snapshot	./server/GameObject.h	/^    virtual void snapshot(pkt::Game &game) {}$/;"	f	class:GameObject	access:public	signature:(pkt::Game &game)
snapshot	./server/GamePlayer.cpp	/^void GamePlayer::snapshot(pkt::Game &game) {$/;"	f	class:GamePlayer	signature:(pkt::Game &game)
speed	./autocode/demo.hpp	/^        f32 speed;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
speed	./autocode/demo.hpp	/^        f32 speed;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
speed	./autocode/demo.hpp	/^    f32 speed;$/;"	m	struct:GameBullet	access:public
speed	./autocode/demo.hpp	/^    f32 speed;$/;"	m	struct:GameTank	access:public
speed	./server/GameTank.h	/^    f32 speed() const { return m_speed; }$/;"	f	class:GameTank	access:public	signature:() const
stamp	./server/tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:	access:private
standalone	./server/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	access:private
stop	./server/GameTank.cpp	/^void GameTank::stop() {$/;"	f	class:GameTank	signature:()
str	./server/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity	access:public
strLength	./server/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity	access:public
tabsize	./server/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument	access:private
tabsize	./server/tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:	access:private
tank	./autocode/demo.hpp	/^    GameTank tank;$/;"	m	struct:GamePlayer	access:public
tank	./server/Room.h	/^        GamePlayerPtr tank;$/;"	m	struct:Room::Info	access:public
tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_bulletCollideTank::_Data	access:public
tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_getProperty::_Data	access:public
tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
tankId	./autocode/demo.hpp	/^        unsigned int tankId;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
tankPosX	./autocode/demo.hpp	/^        f32 tankPosX;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
tankPosX	./autocode/demo.hpp	/^        f32 tankPosX;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
tankPosY	./autocode/demo.hpp	/^        f32 tankPosY;$/;"	m	struct:res_tankCommonAttack::_Data	access:public
tankPosY	./autocode/demo.hpp	/^        f32 tankPosY;$/;"	m	struct:res_tankPowerAttack::_Data	access:public
test	./common/ServerApp.cpp	/^void test()$/;"	f	signature:()
test1	./MyTest.cpp	/^void MyTest::test1()$/;"	f	class:MyTest	signature:()
test2	./MyTest.cpp	/^void MyTest::test2()$/;"	f	class:MyTest	signature:()
timeStamp	./autocode/demo.hpp	/^    f32 timeStamp;$/;"	m	struct:Game	access:public
time_stamp	./server/Game.h	/^    f32 time_stamp() const { return m_time_stamp; }$/;"	f	class:Game	access:public	signature:() const
type	./server/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode	access:protected
update	./common/ServerApp.h	/^    virtual void update(f32 deltaTime) {} \/\/ seconds.$/;"	f	class:ServerApp	access:public	signature:(f32 deltaTime)
update	./server/CProperty.cpp	/^void CProperty::update(f32 deltaTime)$/;"	f	class:CProperty	signature:(f32 deltaTime)
update	./server/CProtectMask.cpp	/^void CProtectMask::update(f32 deltaTime)$/;"	f	class:CProtectMask	signature:(f32 deltaTime)
update	./server/DemoServer.cpp	/^void DemoServer::update(f32 deltaTime) {$/;"	f	class:DemoServer	signature:(f32 deltaTime)
update	./server/Game.cpp	/^void Game::update(f32 deltaTime) $/;"	f	class:Game	signature:(f32 deltaTime)
update	./server/GameBullet.cpp	/^void GameBullet::update(f32 deltaTime)$/;"	f	class:GameBullet	signature:(f32 deltaTime)
update	./server/GameObject.h	/^    virtual void update(f32 deltaTime) {}$/;"	f	class:GameObject	access:public	signature:(f32 deltaTime)
update	./server/GameTank.cpp	/^void GameTank::update(f32 deltaTime) {$/;"	f	class:GameTank	signature:(f32 deltaTime)
useMicrosoftBOM	./server/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	access:private
userData	./server/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase	access:protected
utf8ByteTable	./server/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	access:public
utf8ByteTable	./server/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
value	./server/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode	access:protected
value	./server/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute	access:private
velocity	./server/GameDynamicEntity.h	/^    const vector2f & velocity() const { return m_velocity; }$/;"	f	class:GameDynamicEntity	access:public	signature:() const
version	./server/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	access:private
walls	./autocode/demo.hpp	/^    std::vector<CWall> walls;$/;"	m	struct:Game	access:public
~PlayerManager	./server/PlayerManager.cpp	/^PlayerManager::~PlayerManager() {$/;"	f	class:PlayerManager	signature:()
~Room	./server/Room.cpp	/^Room::~Room() {$/;"	f	class:Room	signature:()
~RoomManager	./server/RoomManager.cpp	/^RoomManager::~RoomManager() {$/;"	f	class:RoomManager	signature:()
~ServerApp	./common/ServerApp.cpp	/^ServerApp::~ServerApp() {$/;"	f	class:ServerApp	signature:()
~TiXmlAttributeSet	./server/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet	signature:()
~TiXmlBase	./server/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase	access:public	signature:()
~TiXmlComment	./server/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment	access:public	signature:()
~TiXmlDeclaration	./server/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration	access:public	signature:()
~TiXmlDocument	./server/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument	access:public	signature:()
~TiXmlElement	./server/tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement	signature:()
~TiXmlNode	./server/tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode	signature:()
~TiXmlText	./server/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText	access:public	signature:()
~TiXmlUnknown	./server/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown	access:public	signature:()
~TiXmlVisitor	./server/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor	access:public	signature:()
